###############################################################################
# Disclaimer:
#
# Even though this automation has been created with care, the author cannot be
# responsible for any damages caused by this automation.  Use at your own risk.
#
###############################################################################
# Objective:
# - Use OCPP or Tesla API to charge EV from excess solar and weather forecast.
#
# History:
# 20/6/2023 Inspiration from Alphaemef's Tesla Solar Charger Blueprint 30/4/2023.
###############################################################################

blueprint:

  name: EV solar charger automation
  description: >
    Use OCPP or Tesla API to charge EV from excess solar and weather forecast (v3.0beta3).
    See https://github.com/flashg1/evSolarCharger for details.
  domain: automation

  #####################################
  # Blueprint inputs
  #####################################
  input:

    #####################################
    # Main configs
    #####################################
    sensor_main_power_net:
      name: Main power net
      description: >
        Sensor that expresses negative value in Watts for available power for charging car or positive value for consumed power.
        This sensor is the feedback loop for adjusting power consumption.
      default: sensor.main_power_net
      selector:
        entity:
          domain: sensor

    charger_voltage:
      name: Charger voltage
      description: >
        Specify charger voltage in Volt.
        In Australia, single phase is 230V, and three phase is 400V due to 120 degree phase angle between phases.
        This can differ between countries.
      default: 230
      selector:
        number:
          min: 110
          max: 750
          unit_of_measurement: volt
          mode: box

    charger_min_current:
      name: Charger minimum current
      description: >
        Specify the minimum car charging current when there is not enough solar electricity (Settings > Devices & Services > Helpers > Create helper > Number).
        The default is 0A if not defined.
      default: number.not_defined
      selector:
        entity:
          domain: input_number

    charger_max_current:
      name: Charger maximum current
      description: Specify charger maximum current in Ampere.
      default: 15
      selector:
        number:
          min: 5
          max: 100
          unit_of_measurement: amp
          mode: box

    step_current_change:
      name: Adjust charger current using step change
      description: >
        Adjust charger current using 1 Amp step change to gradually increase or decrease the current.
        Otherwise current will be set directly with single API call without stepping.
      default: true
      selector:
        boolean:

    power_draw_skew:
      name: Power draw skew
      description: >
        The skew shifts the power export/import curve left or right defining the range where power can fluctuate without causing charger current adjustment. 
        The higher the skew, the less likely to import power and more likely to export power.
        Skew should be kept between 0 and 1 inclusive.  Default = 0.3
          Lower range = P * Skew * (-1) - P/2
          Upper range = P * Skew * (-1) + P/2
          Where P = Charger voltage * 1Amp
        Eg. Charger voltage=230V, Skew=0.3 => Lower range=-184W, Upper range=+46W
      default: 0.3
      selector:
        number:
          min: 0
          max: 1
          mode: box

    wait_main_power_net_update:
      name: Wait main power net update
      description: >
        Specify in seconds how often to check "sensor_main_power_net".
        The waiting period should be equal to the sensor update interval.
      default: 60
      selector:
        number:
          min: 1
          max: 600
          unit_of_measurement: second
          mode: box

    sunrise_elevation_start_trigger:
      name: Sunrise elevation start trigger
      description: >
        Specify elevation to start charging relative to sunrise.
        Default is to start when sun is 6 degrees above horizon after sunrise.
        See https://www.home-assistant.io/docs/scripts/conditions/#sun-elevation-condition for details.
      default: 6
      selector:
        number:
          min: -90
          max: +90
          unit_of_measurement: degree
          mode: box

    sunset_elevation_end_trigger:
      name: Sunset elevation end trigger
      description: >
        Specify elevation to stop charging relative to sunset.
        Default is to end when sun is 6 degrees above the horizon before sunset.
        See https://www.home-assistant.io/docs/scripts/conditions/#sun-elevation-condition for details.
      default: 6
      selector:
        number:
          min: -90
          max: +90
          unit_of_measurement: degree
          mode: box

    toggle_secondary_power_source:
      name: Secondary power source toggle
      description: >
        Toggle on to charge from solar and secondary power source using power offset (Settings > Devices & Services > Helpers > Create helper > Toggle).
        Default is to charge from solar only.
      selector:
        entity:
          domain: input_boolean

    power_offset_from_zero:
      name: Power offset for import from or export to secondary power source
      description: >
        Sensor to specify offset in Watts for power flow to or from secondary power source, eg. battery, grid (Settings > Devices & Services > Helpers > Create helper > Number or Template).
        Set negative value to import from secondary power source, or positive value to export to secondary power source.
        If secondary power source is toggled off, the script will try to achieve power offset of 0 watt, ie. 0 power to or from secondary power source.
      selector:
        entity:

    toggle_stop_charger:
      name: Stop charger toggle
      description: >
        Toggle on to stop charger script (Settings > Devices & Services > Helpers > Create helper > Toggle).
        Delayed by "Wait main power net update" value.
      selector:
        entity:
          domain: input_boolean

    #####################################
    # Car daily charge limit
    #####################################
    toggle_set_daily_car_charge_limit:
      name: Set daily car charge limit toggle
      description: >
        Set car charge limit configured for the day once on start up (Settings > Devices & Services > Helpers > Create helper > Toggle).
        If toggled off, the existing car charge limit will be used.
      selector:
        entity:
          domain: input_boolean

    publish_car_charge_limit:
      name: Publish car charge limit (required for OCPP only)
      description: >
        Placeholder for car charge limit (Settings > Devices & Services > Helpers > Create helper > Number).
        Value determined by script on start up if set daily car charge limit is toggled on, otherwise value must be set by user.
        The script will stop charging once this charge limit is reached.
        Equal or higher charge limit must have already been set in EV.
      default: number.not_defined
      selector:
        entity:
          domain: input_number

    car_charge_limit_monday:
      name: Monday
      description: "Car charge limit for day (valid range: 50 - 100)."
      default: 70
      selector:
        number:
          min: 50
          max: 100
          unit_of_measurement: percent
          mode: slider

    car_charge_limit_tuesday:
      name: Tuesday
      description: "Car charge limit for day (valid range: 50 - 100)."
      default: 70
      selector:
        number:
          min: 50
          max: 100
          unit_of_measurement: percent
          mode: slider

    car_charge_limit_wednesday:
      name: Wednesday
      description: "Car charge limit for day (valid range: 50 - 100)."
      default: 70
      selector:
        number:
          min: 50
          max: 100
          unit_of_measurement: percent
          mode: slider

    car_charge_limit_thursday:
      name: Thursday
      description: "Car charge limit for day (valid range: 50 - 100)."
      default: 70
      selector:
        number:
          min: 50
          max: 100
          unit_of_measurement: percent
          mode: slider

    car_charge_limit_friday:
      name: Friday
      description: "Car charge limit for day (valid range: 50 - 100)."
      default: 80
      selector:
        number:
          min: 50
          max: 100
          unit_of_measurement: percent
          mode: slider

    car_charge_limit_saturday:
      name: Saturday
      description: "Car charge limit for day (valid range: 50 - 100)."
      default: 80
      selector:
        number:
          min: 50
          max: 100
          unit_of_measurement: percent
          mode: slider

    car_charge_limit_sunday:
      name: Sunday
      description: "Car charge limit for day (valid range: 50 - 100)."
      default: 80
      selector:
        number:
          min: 50
          max: 100
          unit_of_measurement: percent
          mode: slider

    #####################################
    # Weather forecast
    #####################################
    charge_car_base_on_weather:
      name: Adjust daily car charge limit based on weather
      description: >
        Automatically adjust to the highest charge limit set within a rainy forecast period.
        Daily car charge limit and weather provider settings must be configured.
      default: false
      selector:
        boolean:

    weather_provider:
      name: Weather provider
      description: Weather forecast provider, eg. Meteorologisk institutt (Met.no).
      default: weather.forecast_home
      selector:
        entity:
          domain: weather

    forecast_index:
      name: Forecast days
      description: Number of days to forecast weather excluding today.
      default: 1
      selector:
        number:
          min: 1
          max: 6
          mode: slider
          unit_of_measurement: day

    forecast_attribute:
      name: Weather condition field name
      description: >
        Field name for forecast attribute (default="condition").
        See https://www.home-assistant.io/integrations/weather/ for details.
      default: "condition"
      selector:
        text:

    car_charge_limit_on_bad_weather:
      name: Car charge limit on bad weather forecast
      description: >
        Car charge limit to set on bad weather forecast (valid range: 50 - 100).
        This will be used unless there is a higher setting within the forecast period.
      default: 80
      selector:
        number:
          min: 50
          max: 100
          unit_of_measurement: percent
          mode: slider

    #####################################
    # OCPP configs
    #####################################
    use_ocpp_api:
      name: Use OCPP API
      description: >
        Toggle on to use OCPP to control an OCPP compliant charger to charge a EV.
        Toggle off to use EV specific API to control a EV for charging (specific EV addon must be installed).
      default: false
      selector:
        boolean:

    ocpp_charger_name:
      name: OCPP charger name
      description: >
        OCPP charger name as defined on your OCPP server.
        "Use OCPP API" must be toggled on, otherwise this has no effect.
        Default: charger
      default: "charger"
      selector:
        text:

    #####################################
    # Tesla and OCPP common config entities
    #####################################
    car_sensor_charger_pluggedin:
      name: Charger plugged in sensor
      description: >
        Sensor to check if car is plugged in. The correct sensor must be set here due to limitation of the Blueprint trigger.
        (OCPP: sensor.charger_status_connector)
      default: binary_sensor.charger
      selector:
        entity:
    #      domain: binary_sensor

    car_switch_charger:
      name: Charger on/off switch
      description: >
        Switch to turn charger on or off.
        (OCPP: switch.charger_charge_control)
      default: switch.charger
      selector:
        entity:
          domain: switch

    car_sensor_charging:
      name: Charger charging sensor
      description: >
        Sensor to check if car is charging.
        (OCPP: sensor.charger_status_connector)
      default: binary_sensor.charging
      selector:
        entity:
    #      domain: binary_sensor

    car_number_charging_amps:
      name: Charger current
      description: >
        Entity to control current in Ampere used to charge the car battery.
        This is the main parameter used to adjust electricity consumption.
        (OCPP: sensor.charger_current_import  - read-only sensor)
      default: number.charging_amps
      selector:
        entity:
          domain: number

    car_sensor_battery:
      name: EV battery state of charge sensor
      description: >
        Sensor that reports current battery charge level.
        (OCPP: sensor.charger_soc)
      default: sensor.battery
      selector:
        entity:
          domain: sensor

    #####################################
    # Tesla specific config entities
    #####################################
    use_ev_specific_api:
      name: Use EV specific API
      description: >
        Toggle on to use EV specific API to control EV for charging. Tesla entities are set by default.
      default: true
      selector:
        boolean:

    car_number_charge_limit:
      name: Tesla charge limit
      description: Entity to control car battery charge limit in percentage (100% = fully charged).
      default: number.charge_limit
      selector:
        entity:
          domain: number

    car_location_tracker:
      name: Tesla location tracker
      description: >
        The entity that provides the location of car.
        Important that home location is defined in Home Assistant.
      default: device_tracker.location_tracker
      selector:
        entity:
          domain: device_tracker

    car_button_wake_up:
      name: Tesla button wake up
      description: Button to wake up car.
      default: button.wake_up
      selector:
        entity:
          domain: button

    car_button_forceupdate_ha:
      name: Tesla button force update Home Assistant
      description: Button to force update sensors in Home Assistant with values from car.
      default: button.force_data_update
      selector:
        entity:
          domain: button

###############################################################################
# Only one Blueprint can run at any one time
###############################################################################
mode: single

###############################################################################
# Global variables
# https://community.home-assistant.io/t/why-the-heck-dont-we-have-global-variables/219671/86
# https://github.com/rogro82/hass-variables
###############################################################################
variables:

  #####################################
  # Constants
  #####################################
  # Tesla UMC charger initial minimum charging current is 5A, after that it can vary between 0A and 15A.
  # Tesla UMC charger initial minimum charging current is 6A.
  initial_charge_current: 6
  
  # Time to wait in seconds for car to wake up.
  wait_car_wakeup: 40

  # Time to wait in seconds to turn charger on or off.
  # To switch on charger from 2V to 230V and then ram up current, it took 16 seconds for initial_charge_current 15A.
  #wait_charger_on: 16
  # To switch on charger from 2V to 230V and then ram up current, it took 11 seconds for initial_charge_current 6A.
  wait_charger_on: 11
  wait_charger_off: 5

  # Time to wait in seconds for current to change after sending command.
  #wait_current_change: "00:00:0.3"
  wait_current_change: 0.3

  # Wait in seconds after setting car charge limit.
  wait_charge_limit: 5
  
  # Time to wait in seconds for command to execute after sending command.
  wait_command_execute: 5
  #wait_command_execute_str: "00:00:{{ wait_command_execute }}"

  # Valid charge limit range for Tesla API, otherwise will get following error,
  # Error: Value 0.0 for number.charge_limit is outside valid range 50 - 100
  car_charge_limit_min: 50
  car_charge_limit_max: 100

  #####################################
  # Inputs
  #####################################
  #####################################
  # Local variables
  #####################################
  # Must not use states() to access local variables
  carChargerVoltage: !input charger_voltage
  carChargerMaxCurrent: !input charger_max_current
  isStepCurrentChange: !input step_current_change

  # The skew shifts the power export/import curve left or right defining the range where power can fluctuate without causing charger current adjustment. 
  # The higher the skew, the lesser the chance to import power and more likely to export power.
  # Skew should be kept between 0 and 1 inclusive.
  # It defines the 230W buffer range in which allPowerNet can fluctuate without causing charger current adjustment.
  #
  # Lower skewed power = P*skew*(-1) - P/2
  # Upper skewed power = P*skew*(-1) + P/2
  # where P = oneAmpWattStep = carChargerVoltage * 1A, eg. 230W
  #
  # To test current decrease by 1A with skew=+0.3, set e_mainPowerNet=47W
  # To test current increase by 1A with skew=+0.3, set e_mainPowerNet=-185W
  #
  # Skew  Power fluctuation range     Comment
  # ----------------------------------------------------------------
  # +2    -575  < allPowerNet < -345  Fluctuates below 0W decreases power draw
  # +1    -345  < allPowerNet < -115
  # +0.7  -276  < allPowerNet < -46
  # +0.5  -230  < allPowerNet < 0
  # +0.3  -184  < allPowerNet < +46
  # 0     -115  < allPowerNet < +115  Fluctuates symmetrically around 0W
  # -1    +115  < allPowerNet < +345
  # -2    +345  < allPowerNet < +575  Fluctuates above 0W increases power draw
  powerDrawSkew: !input power_draw_skew
  
  sunriseElevationStartTrigger: !input sunrise_elevation_start_trigger
  sunsetElevationEndTrigger: !input sunset_elevation_end_trigger

  chargeCarBaseOnWeather: !input charge_car_base_on_weather

  # Power = Voltage * Current
  # The power step in watts to increase or decrease with 1A current change.
  oneAmpWattStep: "{{ carChargerVoltage * 1 }}"

  #####################################
  # e_ => External entities
  #####################################
  # Must use states() to access external entities

  # sensor_main_power_net expresses negative value in Watts for available power for charging car or positive value for consumed power.
  e_mainPowerNet: !input sensor_main_power_net

  e_carChargerMinCurrent: !input charger_min_current
  e_useSecondaryPowerSource: !input toggle_secondary_power_source
  e_powerOffsetFromZero: !input power_offset_from_zero
  e_stopCharger: !input toggle_stop_charger
  e_setDailyCarChargeLimit: !input toggle_set_daily_car_charge_limit
  e_publishCarChargeLimit: !input publish_car_charge_limit

  input_carChargerPluggedIn: !input car_sensor_charger_pluggedin
  input_carChargerSwitch: !input car_switch_charger
  input_isCarCharging: !input car_sensor_charging
  input_carChargingAmps: !input car_number_charging_amps
  input_carBatteryLevel: !input car_sensor_battery

  useEvSpecificApi: !input use_ev_specific_api
  e_teslaCarChargeLimit: !input car_number_charge_limit
  e_teslaCarLocation: !input car_location_tracker
  e_teslaCarWakeUp: !input car_button_wake_up
  e_teslaCarForceUpdateHa: !input car_button_forceupdate_ha

  #####################################
  # OCPP
  #####################################
  useOcppApi: !input use_ocpp_api
  ocppChargerName: !input ocpp_charger_name
  e_ocppChargerTransactionId: "sensor.{{ ocppChargerName }}_transaction_id"

  # Final entity names **MUST not** be quoted here, otherwise entity name will include double quotes causing API call failure, eg.
  # Error: Template rendered invalid entity IDs: "number.charging_amps"
  e_carChargerPluggedIn: >
    {% if useOcppApi %}
      sensor.{{ ocppChargerName }}_status_connector
    {% else %}
      {{ input_carChargerPluggedIn }}
    {% endif %}

  e_carChargerSwitch: >
    {% if useOcppApi %}
      sensor.{{ ocppChargerName }}_charge_control
    {% else %}
      {{ input_carChargerSwitch }}
    {% endif %}

  e_isCarCharging: >
    {% if useOcppApi %}
      sensor.{{ ocppChargerName }}_status_connector
    {% else %}
      {{ input_isCarCharging }}
    {% endif %}

  e_carChargingAmps: >
    {% if useOcppApi %}
      sensor.{{ ocppChargerName }}_current_import
    {% else %}
      {{ input_carChargingAmps }}
    {% endif %}

  e_carBatteryLevel: >
    {% if useOcppApi %}
      sensor.{{ ocppChargerName }}_soc
    {% else %}
      {{ input_carBatteryLevel }}
    {% endif %}

  #####################################
  # Set car charge limit based on which week day
  #####################################
  mon: !input car_charge_limit_monday
  tue: !input car_charge_limit_tuesday
  wed: !input car_charge_limit_wednesday
  thu: !input car_charge_limit_thursday
  fri: !input car_charge_limit_friday
  sat: !input car_charge_limit_saturday
  sun: !input car_charge_limit_sunday
  
  # Store as integer list
  carChargeLimitList: "{{ [mon, tue, wed, thu, fri, sat, sun] }}"
  todayIndex: "{{ now().weekday() }}"

  #####################################
  # Set car charge limit based on weather forecast
  #####################################
  e_weatherProvider: !input weather_provider
  forecastIndex: !input forecast_index
  forecastAttribute: !input forecast_attribute
  carChargeLimitOnBadWeather: !input car_charge_limit_on_bad_weather

  # Not all intervals are available for all providers. Possible values: "hourly", "twice_daily", "daily"
  forecastInterval: "daily"

###############################################################################
# Triggers
# Note:
# - Tesla triggers do not update often due to infrequent polling.
###############################################################################
# entity_id doesn't support templates, so no way to get this to work.
#trigger_variables:
#  useOcppApi: !input use_ocpp_api
#  ocppChargerName: !input ocpp_charger_name
#  input_carChargerPluggedIn: !input car_sensor_charger_pluggedin
#  e_carChargerPluggedIn: >
#    {% if useOcppApi %}
#      sensor.{{ ocppChargerName }}_status_connector
#    {% else %}
#      {{ input_carChargerPluggedIn }}
#    {% endif %}

triggers:

  # Trigger action if just plugged in.
  - platform: state
    entity_id:
      - !input car_sensor_charger_pluggedin
    to:
      - "on"
      - "Available"

  # Trigger action at elevation after sunrise.
  - trigger: numeric_state
    entity_id: sun.sun
    attribute: elevation
    above: !input sunrise_elevation_start_trigger

conditions:

  # OCPP charger will know when it is plugged in at location.
  - condition: template
    value_template: >
      {% if useEvSpecificApi %}
        {{ is_state(e_teslaCarLocation, 'home') }}
      {% else %}
        {{ true }}
      {% endif %}

  - condition: state
    entity_id: !input car_sensor_charger_pluggedin
    state:
      - "on"
      - "Available"

###############################################################################
# Actions
###############################################################################
actions:

  - if:
      - condition: template
        value_template: "{{ useEvSpecificApi }}"
    then:
      # Wake up Tesla.
      - service: button.press
        data: {}
        target:
          entity_id: "{{ e_teslaCarWakeUp }}"
      - delay: "{{ wait_car_wakeup }}"

      # Get the latest data from Tesla to update HA.
      - service: button.press
        data: {}
        target:
          entity_id: "{{ e_teslaCarForceUpdateHa }}"
      - delay: "{{ wait_command_execute }}"

      # Sanity check in case of manual run.
      # Do not manually run this script if car is not at home, because it affects car charging anywhere.
      - if:
          - condition: template
            value_template: "{{ states(e_teslaCarLocation) != 'home' }}"
        then:
          - stop: "Exiting script because car is not at home, otherwise the script will affect car if charging elsewhere."

  # Always set initial charge current here.  Otherwise if the charger is already on, it might not be set for sometime until there is a change.
  # The new charge current value will only be set if the old and new values are different. Confirmed in log.
  - if:
      - condition: template
        value_template: "{{ useOcppApi }}"
    then:
      - service: ocpp.set_charge_rate     
        data:
          custom_profile: |
            {
              "transactionId": {{ states(e_ocppChargerTransactionId) | int }},
              "chargingProfileId": 1,
              "stackLevel": 0,
              "chargingProfilePurpose": "TxProfile",
              "chargingProfileKind": "Relative",
              "chargingSchedule": {
                "chargingRateUnit": "A",
                "chargingSchedulePeriod": [
                  {"startPeriod": 0, "limit": {{ initial_charge_current }}}  
                ]
              }
            }
          conn_id: 1
    else:
      - service: number.set_value
        data:
          value: "{{ initial_charge_current }}"
        target:
          entity_id: "{{ e_carChargingAmps }}"
  - delay: "{{ wait_command_execute }}"

  #####################################
  # Set car charge limit on start up
  #####################################
  # Should honour existing charge limit set by app or car, unless set daily car charge limit is toggled on.
  #
  # If set daily car charge limit is toggled off, charge limit will be set according to the Tesla app.
  # If set daily car charge limit is toggled on and charge car based on weather is disabled, charge limit will be set according to the limit configured for the day.
  # If set daily car charge limit is toggled on and charge car based on weather is enabled, charge limit will be adjusted to the highest limit set within the rainy forecast period taking into account the car charge limit on bad weather setting.
  #
  # If charge car based on weather is enabled, daily car charge limit and weather provider settings must be configured.

  - choose:

    # Note the following syntax caused variables not to be highlighted in HA trace "Step Config" tab.
    #- conditions: >
    #    {{ todayCarChargeLimit >= car_charge_limit_min and todayCarChargeLimit <= car_charge_limit_max }}

    - conditions:
        - alias: "If set daily car charge limit on start up"
          condition: template
          value_template: "{{ is_state(e_setDailyCarChargeLimit, 'on') }}"

      # Then set charge limit base on config
      sequence:
        - if:
            - alias: "If charge car based on weather"
              condition: template
              value_template: "{{ chargeCarBaseOnWeather }}"
          then:
            - alias: "Then get weather forecast data"
              service: weather.get_forecasts
              target:
                entity_id: !input weather_provider
              data:
                type: "{{ forecastInterval }}"
              response_variable: weather_forecast

        - variables:
            # Period forecast list excluding today
            periodForecastList: >
              {% set data = namespace(strings=[]) %}
              {% if chargeCarBaseOnWeather %}
                {% for day in range(1, forecastIndex + 1, 1) %}
                  {% set data.strings = data.strings + [weather_forecast[e_weatherProvider]['forecast'][day][forecastAttribute]] %}
                {% endfor %}
              {% endif %}
              {{ data.strings }}

            weatherToday: >
              {% if chargeCarBaseOnWeather %}
                {{ weather_forecast[e_weatherProvider]['forecast'][0][forecastAttribute] }}
              {% else %}
                {{ "weather forecast disabled" }}
              {% endif %}

            # Charge limit list for the next N days excluding today. Also take into account carChargeLimitOnBadWeather.
            badWeatherPeriodChargeLimitList: >
              {% set data = namespace(numbers=[carChargeLimitOnBadWeather]) %}
              {% for i in range(1, forecastIndex + 1, 1) %}
                {% set day = (todayIndex + i) % 7 %}
                {% set data.numbers = data.numbers + [carChargeLimitList[day]] %}
              {% endfor %}
              {{ data.numbers }}

            badWeatherPeriodMaxChargeLimit: "{{ badWeatherPeriodChargeLimitList | max }}"

            todayCarChargeLimit: "{{ carChargeLimitList[todayIndex] }}"

            # See https://www.home-assistant.io/integrations/weather/
            # Some possible values: rainy, cloudy, partlycloudy, clear-night
            finalCarChargeLimit: >
              {% if chargeCarBaseOnWeather
              and 'rainy' in periodForecastList
              and badWeatherPeriodMaxChargeLimit > todayCarChargeLimit %}
                {{ badWeatherPeriodMaxChargeLimit }}
              {% else %}
                {{ todayCarChargeLimit }} 
              {% endif %}

        # Show current status
        - service: system_log.write
          data_template:
            message: |-
              {{now()}}: 
              finalCarChargeLimit={{finalCarChargeLimit}}, todayCarChargeLimit={{todayCarChargeLimit}}, carChargeLimitOnBadWeather={{carChargeLimitOnBadWeather}},
              badWeatherPeriodMaxChargeLimit={{badWeatherPeriodMaxChargeLimit}}, badWeatherPeriodChargeLimitList={{badWeatherPeriodChargeLimitList}}, periodForecastList={{periodForecastList}},
              todayIndex={{todayIndex}}, carChargeLimitList={{carChargeLimitList}}, weatherToday={{weatherToday}}
            #level: warning
            level: info

        - if:
            - condition: template
              value_template: "{{ useOcppApi }}"
          then:
            # Publish final car charge limit as global variable to be used later on in script.
            - service: input_number.set_value
              data_template:
                entity_id: !input publish_car_charge_limit
                value: "{{ finalCarChargeLimit }}"
          else:
            # Changing charge limit can turn on or off charger by car depending on whether charge limit has been reached or not.
            - service: number.set_value
              data:
                value: "{{ finalCarChargeLimit }}"
              target:
                entity_id: !input car_number_charge_limit
        - delay: "{{ wait_charge_limit }}"

        - if:
            - condition: template
              value_template: "{{ useEvSpecificApi }}"
          then:
            # Car charger is turned on if setting higher charge limit, so must get latest update before proceeding. Otherwise script can exit without turning off charger.
            - service: button.press
              data: {}
              target:
                entity_id: "{{ e_teslaCarForceUpdateHa }}"
            - delay: "{{ wait_command_execute }}"

  #####################################
  # Main while loop
  #####################################
  - repeat:

      # Only start charging when following conditions are met, otherwise exit script.
      while:
        - condition: and
          conditions:

            - alias: "Continue if stop button is toggled off"
              condition: template
              value_template: "{{ is_state(e_stopCharger, 'off') }}"

            - alias: "Continue if charger is plugged in"
              condition: state
              entity_id: !input car_sensor_charger_pluggedin
              state:
                - "on"
                - "Available"
                - "Charging"

            - alias: "Continue if battery is below charge limit"
              condition: template
              value_template: >
                {% if useOcppApi %}
                  {{ (states(e_carBatteryLevel) | int) < (states(e_publishCarChargeLimit) | int) }}
                {% else %}
                  {{ (states(e_carBatteryLevel) | int) < (states(e_teslaCarChargeLimit) | int) }}
                {% endif %}

            - condition: or
              conditions:

                - alias: "Continue if using secondary power source"
                  condition: template
                  value_template: "{{ is_state(e_useSecondaryPowerSource, 'on') }}"

                - alias: "Continue if sun is above start or end elevations"
                  condition: template
                  value_template: >
                    {{ (is_state_attr('sun.sun', 'rising', true) and state_attr('sun.sun', 'elevation') > sunriseElevationStartTrigger)
                    or (is_state_attr('sun.sun', 'rising', false) and state_attr('sun.sun', 'elevation') > sunsetElevationEndTrigger) }}

      sequence:

        # Switch on charger before calculating power usage. Accuracy depends on rate of main_power_net update.
        - if:
            - alias: "If looping for the first time in while loop"
              condition: template
              value_template: "{{ repeat.index == 1 }}"
          then:
            - alias: "Then turn on charger if not already on"
              if:
                - condition: template
                  value_template: "{{ not (is_state(e_isCarCharging, 'on') or is_state(e_isCarCharging, 'Charging')) }}"
              then:
                # Turn on charger for the first time. Rate of current increase is handled by Tesla car.
                - service: switch.turn_on
                  data: {}
                  target:
                    entity_id: "{{ e_carChargerSwitch }}"
                - delay: "{{ wait_charger_on }}"

                # Sometimes the charging status is not updated after turning on charger causing script to exit in while loop. Best to get status now.
                - if:
                    - condition: template
                      value_template: "{{ useEvSpecificApi }}"
                  then:
                    - service: button.press
                      data: {}
                      target:
                        entity_id: "{{ e_teslaCarForceUpdateHa }}"
                    - delay: "{{ wait_command_execute }}"

        # For debug only
        #- service: system_log.write
        #  data_template:
        #    message: |-
        #      {{now()}}: 
        #      e_carChargingAmps={{e_carChargingAmps}}, e_ocppChargerTransactionId={{e_ocppChargerTransactionId}}
        #    #level: warning
        #    level: info

        - variables:
            # Minimum charge current
            chargerMinCurrent: >
              {% if has_value(e_carChargerMinCurrent) %}
                {{ states(e_carChargerMinCurrent) | int }}
              {% else %}
                {{ 0 }}
              {% endif %}

            # -ve to use from secondary power source, +ve to export to secondary power source.
            powerOffset: >
              {% if is_state(e_useSecondaryPowerSource, 'on') %}
                {{ states(e_powerOffsetFromZero) | int }}
              {% else %}
                {{ 0 }}
              {% endif %}

            # Net power from all sources (default 0 set by float(0) if cannot convert to float).
            allPowerNet: "{{ states(e_mainPowerNet) | float(0) + (oneAmpWattStep * powerDrawSkew) + powerOffset }}"

            # This can be greater than carChargerMaxCurrent.
            # +ve => importing amp from grid, -ve => exporting amp to grid
            allCurrentNet: "{{ (allPowerNet / oneAmpWattStep) | float }}"

            # Charge current for this sequence run, including sanity check to ensure within limits. OCPP has current with 1 decimal place.
            chargeCurrent: "{{ states(e_carChargingAmps) | round(0) }}"
            carChargeCurrent: >
              {% if chargeCurrent < 0 %}
                {{ 0 }}
              {% elif chargeCurrent > carChargerMaxCurrent %}
                {{ carChargerMaxCurrent }}
              {% else %}
                {{ chargeCurrent }}
              {% endif %}

            # If importing from grid, will try to decrease charge current by same consumption or min charger current.
            # If exporting to grid, will try to increase charge current by same production or max charger current.
            proposeChargeCurrent: >
              {% if allCurrentNet > 0 %}
                {{ [chargerMinCurrent, carChargeCurrent - allCurrentNet] | max | round(0) }}
              {% else %}
                {{ [carChargerMaxCurrent, carChargeCurrent - allCurrentNet] | min | round(0) }}
              {% endif %}
            
            # Ensure new charge current is greater than or equal to charger minimum current.
            newChargeCurrent: "{{ [chargerMinCurrent, proposeChargeCurrent] | max }}"

            # Not used
            #isDaytime: >
            #  {% if (is_state_attr('sun.sun', 'rising', true) and state_attr('sun.sun', 'elevation') > sunriseElevationStartTrigger)
            #  or (is_state_attr('sun.sun', 'rising', false) and state_attr('sun.sun', 'elevation') > sunsetElevationEndTrigger) %}
            #    {{ true }}
            #  {% else %}
            #    {{ false }}
            #  {% endif %}

        - choose:

          - conditions:
              - alias: "Exit script if charger is turned off"
                condition: template
                value_template: "{{ not (is_state(e_isCarCharging, 'on') or is_state(e_isCarCharging, 'Charging')) }}"

            sequence:
              # Get the latest data from Tesla to update HA before exiting script
              - if:
                  - condition: template
                    value_template: "{{ useEvSpecificApi }}"
                then:
                  - service: button.press
                    data: {}
                    target:
                      entity_id: "{{ e_teslaCarForceUpdateHa }}"
                  - delay: "{{ wait_command_execute }}"

              - stop: "Exiting script due to charger turned off manually or automatically by car when charge limit reached."
                # https://www.home-assistant.io/docs/scripts/#stopping-a-script-sequence
                # Cannot get response_variable to work. Needs to be key/value pair?
                #response_variable: "stop_charging_reason"

          # If using OCPP. See OCPP https://github.com/taste66/ocpp/blob/patch-1/docs/Charge_automation.md
          - conditions:
              - alias: "If using OCPP"
                condition: template
                value_template: "{{ useOcppApi }}"
            sequence:
              - alias: "Then set current using OCPP"
                service: ocpp.set_charge_rate     
                data:
                  custom_profile: |
                    {
                      "transactionId": {{ states(e_ocppChargerTransactionId) | int }},
                      "chargingProfileId": 1,
                      "stackLevel": 0,
                      "chargingProfilePurpose": "TxProfile",
                      "chargingProfileKind": "Relative",
                      "chargingSchedule": {
                        "chargingRateUnit": "A",
                        "chargingSchedulePeriod": [
                          {"startPeriod": 0, "limit": {{ newChargeCurrent }}}  
                        ]
                      }
                    }
                  conn_id: 1

          # Need to change charger current without stepping.
          - conditions:
              - alias: "If need to change charge current without stepping"
                condition: template
                value_template: "{{ not isStepCurrentChange and newChargeCurrent != carChargeCurrent }}"
            sequence:
              - alias: "Then change charger current without stepping"
                service: number.set_value
                data_template:
                  value: "{{ newChargeCurrent }}"
                target:
                  entity_id: "{{ e_carChargingAmps }}"

          # Need to increase charger current.
          - conditions:
              - alias: "If need to increase charge current"
                condition: template
                value_template: "{{ newChargeCurrent > carChargeCurrent }}"
            sequence:
              - alias: "Then increase charger current with 1A step"
                repeat:
                  while: "{{ (carChargeCurrent + repeat.index) <= newChargeCurrent }}"
                  sequence:
                    - service: number.set_value
                      data_template:
                        value: "{{ carChargeCurrent + repeat.index }}"
                      target:
                        entity_id: "{{ e_carChargingAmps }}"
                    - delay: "{{ wait_current_change }}"

          # Need to decrease charger current.
          - conditions:
              - alias: "If need to decrease charge current"
                condition: template
                value_template: "{{ newChargeCurrent < carChargeCurrent }}"
            sequence:
              - alias: "Then decrease charger current with 1A step"
                repeat:
                  while: "{{ (carChargeCurrent - repeat.index) >= newChargeCurrent }}"
                  sequence:
                    - service: number.set_value
                      data_template:
                        value: "{{ carChargeCurrent - repeat.index }}"
                      target:
                        entity_id: "{{ e_carChargingAmps }}"
                    - delay: "{{ wait_current_change }}"

          # Do nothing.
          - conditions:
              - alias: "If no need to change charge current"
                condition: template
                value_template: "{{ newChargeCurrent == carChargeCurrent }}"
            sequence:
              - alias: "Then do not change charger current"
                delay: "00:00:00"

          # Default do nothing.
          default:
            - alias: "Should never get to this default branch"
              delay: "00:00:00"

        # Sleep enough to allow solar inverter updates. Should be ok to sleep longer to avoid changing charge current too often.
        # Other things can happen during sleep time, eg. car unplugged.
        - delay:
            hours: 0
            minutes: 0
            seconds: !input wait_main_power_net_update
            milliseconds: 0

        # Get latest conditions from Tesla to update HA as last step before checking these conditions at beginning of repeat loop.
        - if:
            - condition: template
              value_template: "{{ useEvSpecificApi }}"
          then:
            - service: button.press
              data: {}
              target:
                entity_id: "{{ e_teslaCarForceUpdateHa }}"
            - delay: "{{ wait_command_execute }}"

  #####################################
  # Exit script
  #####################################
  # Gradually decrease to 0A with 1A step, otherwise Tesla car can decrease current from 15A -> 7A -> 0A in 1 second.
  - if:
      - condition: template
        value_template: "{{ useOcppApi }}"
    then:
      - service: ocpp.set_charge_rate
        data:
          custom_profile: |
            {
              "transactionId": {{ states(e_ocppChargerTransactionId) | int }},
              "chargingProfileId": 1,
              "stackLevel": 0,
              "chargingProfilePurpose": "TxProfile",
              "chargingProfileKind": "Relative",
              "chargingSchedule": {
                "chargingRateUnit": "A",
                "chargingSchedulePeriod": [
                  {"startPeriod": 0, "limit": {{ 0 }}}  
                ]
              }
            }
          conn_id: 1
    else:
      - service: number.set_value
        data_template:
          value: "{{ 0 }}"
        target:
          entity_id: "{{ e_carChargingAmps }}"
  - delay: "{{ wait_command_execute }}"

  # Turn off charger if it is on or charging
  - if:
      - condition: template
        value_template: "{{ is_state(e_isCarCharging, 'on') or is_state(e_isCarCharging, 'Charging') }}"
    then:
      - service: switch.turn_off
        data: {}
        target:
          entity_id: "{{ e_carChargerSwitch }}"
      - delay: "{{ wait_charger_off }}"

  # Get the latest data from Tesla to update HA before exiting script.
  - if:
      - condition: template
        value_template: "{{ useEvSpecificApi }}"
    then:
      - service: button.press
        data: {}
        target:
          entity_id: "{{ e_teslaCarForceUpdateHa }}"
      - delay: "{{ wait_command_execute }}"
