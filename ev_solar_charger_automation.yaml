###############################################################################
# Disclaimer:
#
# Even though this automation has been created with care, the author cannot be
# responsible for any damages caused by this automation.  Use at your own risk.
#
###############################################################################
# Objective:
# - Use OCPP and/or EV specific API to charge EV from excess solar and weather forecast.
#
# History:
# 20/6/2023 Inspiration from Alphaemef's Tesla Solar Charger Blueprint 30/4/2023.
###############################################################################

blueprint:

  name: EV solar charger automation
  description: >
    Use OCPP and/or EV specific API to charge EV from excess solar and weather forecast.
    See [github project page](https://github.com/flashg1/evSolarCharger) for details.


    The following configs are required as a minimum for a functional Blueprint:
      * Main power net
      * Charger effective voltage and maximum current
      * Next charge time trigger
      * Battery maximum charge speed
      * Charge control API selection
      * Car or charger unique identifier


    Helpers can be created on form or at Settings > Devices & Services > Helpers > Create helper.


    **Version**: v3.0beta36


    Your support is much appreciated if you find this project useful.


    [![ko-fi](https://ko-fi.com/img/githubbutton_sm.svg)](https://ko-fi.com/flashg1)

  domain: automation

  #####################################
  # Blueprint inputs
  #####################################
  input:

    #####################################
    # Main configs
    #####################################
    sensor_main_power_net:
      name: Main power net
      description: >
        Sensor that expresses negative value in Watts for available power for charging or positive value for consumed power.
        This sensor is the feedback loop for adjusting power consumption.
      default: sensor.main_power_net
      selector:
        entity:
          domain: sensor

    charger_effective_voltage:
      name: Charger effective voltage
      description: >
        Sensor or number helper to specify charger effective voltage in Volts for single-phase or 3-phase system.
        In Australia, set 230V for single-phase or 690V for 3-phase. (For a 3-phase system, voltage between any 2 phases is 230*√3≈400V due to 120 degree angle between phases.)
        See [here](https://github.com/flashg1/evSolarCharger/wiki/Configuration#create-charger-effective-voltage-sensor-for-3-phase-system) for setting voltage for 3-phase charger.
      selector:
        entity:
          domain:
            - sensor
            - input_number

    charger_max_current:
      name: Charger maximum current
      description: Specify charger maximum current in Ampere.
      default: 15
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: amp
          mode: box

    next_charge_time_trigger:
      name: Next charge time trigger
      description: >
        ***Create date/time helper with both date and time selected.***
        In preparation for tomorrow's charging session, the date/time trigger will be set by this automation just before the end of the current charging session.
        Once set, the helper will trigger the next run to meet charge completion time using secondary power source (grid/battery) and solar.
        Requires "Set daily charge limit toggle" to be on and charge completion time to be set for the day.
        (Trigger entities must be created whether they are used or not.)
      selector:
        entity:
          domain:
            - input_datetime

    battery_max_charge_speed:
      name: Battery maximum charge speed
      description: >
        Create number or template helper to specify the battery **maximum** charge speed in hour per percentage rise in battery charge level.
        The battery charge speed is used in schedule charging to estimate the time required to charge the battery to the specified percentage.
        Determine your own battery specific charge speed when using maximum charge current
        (see [example](https://github.com/flashg1/evSolarCharger/wiki/Configuration#how-to-determine-battery-maximum-charge-speed)).
          * The default is 0.1631 hour/percent for 15A max charge current if not defined.
      default: number.user_custom
      selector:
        entity:
          domain:
            - input_number
            - number
            - sensor

    charger_min_current:
      name: Charger minimum current
      description: >
        Create number or template helper to specify the minimum charge current at all times.
          * The default is 0A if not defined.
      default: number.user_custom
      selector:
        entity:
          domain:
            - input_number
            - number
            - sensor

    charger_min_workable_current:
      name: Charger minimum workable current
      description: >
        Specify charger minimum workable current in Ampere.
        If available current falls below the charger minimum workable current, the charge current will be set to 0A.
        OCPP charger may require the minimum workable current to be set to 6A.
          * Default:  0
      default: 0
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: amp
          mode: box

    sunrise_elevation_start_trigger:
      name: Sunrise elevation start trigger
      description: >
        Specify elevation to start charging relative to sunrise.
        See [here](https://www.home-assistant.io/docs/scripts/conditions/#sun-elevation-condition) for details.
          * The default is to start when sun is 6 degrees above horizon after sunrise.
      default: 6
      selector:
        number:
          min: -90
          max: +90
          unit_of_measurement: degree
          mode: box

    sunset_elevation_end_trigger:
      name: Sunset elevation end trigger
      description: >
        Specify elevation to stop charging relative to sunset.
        See [here](https://www.home-assistant.io/docs/scripts/conditions/#sun-elevation-condition) for details.
          * The default is to end when sun is 6 degrees above the horizon before sunset.
      default: 6
      selector:
        number:
          min: -90
          max: +90
          unit_of_measurement: degree
          mode: box

    wait_main_power_net_update:
      name: Wait main power net update
      description: >
        Specify in seconds how often to check "sensor_main_power_net".
        The waiting period should be equal to the sensor update interval.
          * Default:  60
      default: 60
      selector:
        number:
          min: 1
          max: 600
          unit_of_measurement: second
          mode: box

    wait_status_update:
      name: Wait status update
      description: >
        Specify in seconds to wait for status update after issuing command to refresh status in HA.
        For Tesla BLE MQTT API, tested ok with minimum 21 seconds but suggest to try 25 seconds.
          * Default:  5
      default: 5
      selector:
        number:
          min: 1
          max: 600
          unit_of_measurement: second
          mode: box

    power_draw_skew:
      name: Power draw skew
      description: >
        The skew shifts the power export/import curve left or right defining the range where power can fluctuate without causing charger current adjustment. 
        The higher the skew, the less likely to import power and more likely to export power.
        Skew should be kept between 0 and 1 inclusive.
          * Lower range = P * Skew * (-1) - P/2
          * Upper range = P * Skew * (-1) + P/2
          * Where P = Charger voltage * 1 Amp
        
        Eg. Charger voltage = 230V, Skew = 0.3 => Lower range = -184W, Upper range = +46W
          * Default:  0.3
      default: 0.3
      selector:
        number:
          min: 0
          max: 1
          mode: box

    power_offset_from_zero:
      name: Power offset for import from or export to secondary power source (grid/battery)
      description: >
        Create number or template helper to specify maximum power flow to or from secondary power source at all times.
        Set negative value to import from secondary power source, or positive value to export to secondary power source.
        Suggest to set to 0 Watt to charge from solar only.
          * The default is 0W if not defined.
      default: sensor.user_custom
      selector:
        entity:
          domain:
            - input_number
            - number
            - sensor

    toggle_secondary_power_source:
      name: Secondary power source toggle for night time charging
      description: >
        Create toggle helper.
        Toggle on to charge from secondary power source (grid/battery) at night using power offset or minimum current.
        Toggle off to charge car during daytime only.
          * The default is off if not defined.
      default: boolean.user_custom
      selector:
        entity:
          domain: input_boolean

    toggle_stop_charger:
      name: Stop charger toggle
      description: >
        Create toggle helper.
        Toggle on to stop charger script.
        Delayed by "Wait main power net update" value.
          * The default is off if not defined.
      default: boolean.user_custom
      selector:
        entity:
          domain: input_boolean

    #####################################
    # Daily charge limit
    #####################################
    toggle_set_daily_charge_limit:
      name: Set daily charge limit toggle
      description: >
        Create toggle helper.
        Toggle on to set charge limit configured for the day once on start up.
        If toggled off, the existing car charge limit will be used.


        Note: Requires battery level sensor for this to work. Please toggle off this option if battery level sensor is not available.
          * The default is off if not defined.
      default: boolean.user_custom
      selector:
        entity:
          domain: input_boolean

    charge_limit_monday:
      name: Monday charge limit
      description: >
        Create number helper to set charge limit for day (valid range: 50 - 100).
          * The default is 60% if not defined.
      default: number.user_custom
      selector:
        entity:
          domain:
            - input_number

    charge_completion_time_monday:
      name: Monday charge completion time
      description: >
        Create time helper to set charge completion time for day (valid range: 00:01 - 23:59).
        Set to 00:00 to indicate no completion time.
          * The default is 00:00 if not defined.
      default: datetime.user_custom
      selector:
        entity:
          domain:
            - input_datetime

    charge_limit_tuesday:
      name: Tuesday charge limit
      description: >
        Create number helper to set charge limit for day (valid range: 50 - 100).
          * The default is 60% if not defined.
      default: number.user_custom
      selector:
        entity:
          domain:
            - input_number

    charge_completion_time_tuesday:
      name: Tuesday charge completion time
      description: >
        Create time helper to set charge completion time for day (valid range: 00:01 - 23:59).
        Set to 00:00 to indicate no completion time.
          * The default is 00:00 if not defined.
      default: datetime.user_custom
      selector:
        entity:
          domain:
            - input_datetime

    charge_limit_wednesday:
      name: Wednesday charge limit
      description: >
        Create number helper to set charge limit for day (valid range: 50 - 100).
          * The default is 60% if not defined.
      default: number.user_custom
      selector:
        entity:
          domain:
            - input_number

    charge_completion_time_wednesday:
      name: Wednesday charge completion time
      description: >
        Create time helper to set charge completion time for day (valid range: 00:01 - 23:59).
        Set to 00:00 to indicate no completion time.
          * The default is 00:00 if not defined.
      default: datetime.user_custom
      selector:
        entity:
          domain:
            - input_datetime

    charge_limit_thursday:
      name: Thursday charge limit
      description: >
        Create number helper to set charge limit for day (valid range: 50 - 100).
          * The default is 60% if not defined.
      default: number.user_custom
      selector:
        entity:
          domain:
            - input_number

    charge_completion_time_thursday:
      name: Thursday charge completion time
      description: >
        Create time helper to set charge completion time for day (valid range: 00:01 - 23:59).
        Set to 00:00 to indicate no completion time.
          * The default is 00:00 if not defined.
      default: datetime.user_custom
      selector:
        entity:
          domain:
            - input_datetime

    charge_limit_friday:
      name: Friday charge limit
      description: >
        Create number helper to set charge limit for day (valid range: 50 - 100).
          * The default is 70% if not defined.
      default: number.user_custom
      selector:
        entity:
          domain:
            - input_number

    charge_completion_time_friday:
      name: Friday charge completion time
      description: >
        Create time helper to set charge completion time for day (valid range: 00:01 - 23:59).
        Set to 00:00 to indicate no completion time.
          * The default is 00:00 if not defined.
      default: datetime.user_custom
      selector:
        entity:
          domain:
            - input_datetime

    charge_limit_saturday:
      name: Saturday charge limit
      description: >
        Create number helper to set charge limit for day (valid range: 50 - 100).
          * The default is 70% if not defined.
      default: number.user_custom
      selector:
        entity:
          domain:
            - input_number

    charge_completion_time_saturday:
      name: Saturday charge completion time
      description: >
        Create time helper to set charge completion time for day (valid range: 00:01 - 23:59).
        Set to 00:00 to indicate no completion time.
          * The default is 00:00 if not defined.
      default: datetime.user_custom
      selector:
        entity:
          domain:
            - input_datetime

    charge_limit_sunday:
      name: Sunday charge limit
      description: >
        Create number helper to set charge limit for day (valid range: 50 - 100).
          * The default is 60% if not defined.
      default: number.user_custom
      selector:
        entity:
          domain:
            - input_number

    charge_completion_time_sunday:
      name: Sunday charge completion time
      description: >
        Create time helper to set charge completion time for day (valid range: 00:01 - 23:59).
        Set to 00:00 to indicate no completion time.
          * The default is 00:00 if not defined.
      default: datetime.user_custom
      selector:
        entity:
          domain:
            - input_datetime

    #####################################
    # Weather forecast
    #####################################
    adjust_charge_limit_based_on_weather:
      name: Adjust daily charge limit based on weather
      description: >
        Create toggle helper.
        Toggle on to automatically adjust to the highest charge limit set within a rainy forecast period.
        Daily charge limit and weather provider settings must be configured.
          * The default is off if not defined.
      default: boolean.user_custom
      selector:
        entity:
          domain: input_boolean

    weather_provider:
      name: Weather provider
      description: >
        Weather forecast provider, eg. Meteorologisk institutt (Met.no).
          * Default:  weather.forecast_home
      default: weather.forecast_home
      selector:
        entity:
          domain: weather

    forecast_index:
      name: Forecast days
      description: >
        Number of days to forecast weather excluding today.
          * Default:  1
      default: 1
      selector:
        number:
          min: 1
          max: 6
          mode: slider
          unit_of_measurement: day

    forecast_attribute:
      name: Weather condition field name
      description: >
        Field name for forecast attribute.
        See [here](https://www.home-assistant.io/integrations/weather/) for details.
          * Default:  condition
      default: "condition"
      selector:
        text:

    charge_limit_on_bad_weather:
      name: Charge limit on bad weather forecast
      description: >
        Charge limit to set on bad weather forecast (valid range: 50 - 100).
        This will be used unless there is a higher setting within the forecast period.
          * Default:  70
      default: 70
      selector:
        number:
          min: 50
          max: 100
          unit_of_measurement: percent
          mode: slider

    #####################################
    # Charge control API selection
    #####################################
    select_charge_control_api:
      name: Charge control API
      description: >
        Select the charge control API for controlling EV charging.
        Select
        [Tesla Custom API](https://github.com/alandtse/tesla),
        or [Tesla Fleet API](https://www.home-assistant.io/integrations/tesla_fleet) (not tested),
        or [Tesla BLE (Bluetooth Low Energy) MQTT API](https://github.com/tesla-local-control/tesla_ble_mqtt_docker),
        or [OCPP (Open Charge Point Protocol) Charger API](https://github.com/lbbrhzn/ocpp) to control an OCPP compliant charger to charge a EV (tested with [OCPP simulator](https://github.com/lewei50/iammeter-simulator) only),
        or select user custom API to specify your own configs.
        Configs that are marked as ***Not defined*** for the selected API can be manually entered if required.


        Note: ***The untested APIs above might not work with this Blueprint.***
          * Default:  Tesla custom API
      default: "k_tesla_custom_api"
      selector:
        select:
          options:
          - label: Tesla custom API
            value: "k_tesla_custom_api"
          - label: Tesla Fleet API
            value: "k_tesla_fleet_api"
          - label: Tesla BLE MQTT API
            value: "k_tesla_blemqtt_api"
          - label: OCPP charger API
            value: "k_ocpp_charger_api"
          - label: User custom API
            value: "k_user_custom_api"
          custom_value: false
          multiple: false
          sort: false
        
    #####################################
    # Tesla configs
    #####################################
    tesla_car_name:
      name: Tesla car name
      description: >
        Enter the Tesla car name for use with ***Tesla Custom API*** or ***Tesla Fleet API***.
        Tesla car name combines with base entity name to form a unique entity identifier.
          * Default:  (blank, no quotes)
      default: ""
      selector:
        text:

    #####################################
    # BLE configs
    #####################################
    ble_vin_id:
      name: Tesla BLE VIN ID
      description: >
        Enter the Tesla BLE VIN ID for use with ***Tesla BLE MQTT API***.
        BLE VIN ID combines with base entity name to form a unique entity identifier.
        If using RPi4b, must turn off all nearby Bluetooth devices to limit number of connected keys and interference.
          * Default:  vin
      default: "vin"
      selector:
        text:

    #####################################
    # OCPP configs
    #####################################
    ocpp_charger_name:
      name: OCPP charger name
      description: >
        Enter the OCPP charger name as defined on your OCPP server for use with ***OCPP charger API***.
        OCPP charger name combines with base entity name to form a unique entity identifier.
          * Default:  charger
      default: "charger"
      selector:
        text:

    #####################################
    # Basic common control entities
    #####################################
    charger_plugged_in_sensor:
      name: Charger plugged in sensor
      description: >
        Sensor to check if charger is connected.
        States are defined in "Charger connect trigger list" and "Charger connected state list".
        Config is automatically defined for the selected API unless it is marked as ***Not defined***.
          * Tesla Custom: binary_sensor.[CarName_]charger
          * Tesla Fleet:  binary_sensor.[CarName_]charge_cable
          * Tesla BLE:    sensor.tesla_ble_[vin]_charge_cable
          * OCPP:         sensor.[ChargerName]_status_connector
          * User custom:  ***Not defined***
      default: binary_sensor.user_custom
      selector:
        entity:
          domain:
            - binary_sensor
            - sensor

    charger_connect_trigger_list:
      name: Charger connect trigger list
      description: >
        Define list of charger connect states that can trigger this automation.
        List must be in square brackets, and states in single quotes and comma separated.
        Config is automatically defined for the selected API unless it is marked as ***Not defined***.
          * Tesla Custom: ['on']
          * Tesla Fleet:  ['on']
          * Tesla BLE:    ['SAE', 'IEC']
          * OCPP:         ['Preparing']
          * User custom:  ***Not defined***
      default: "[]"
      selector:
        text:

    charger_connected_state_list:
      name: Charger connected state list
      description: >
        Define list of charger connected states.
        List must be in square brackets, and states in single quotes and comma separated.
        Config is automatically defined for the selected API unless it is marked as ***Not defined***.
          * Tesla Custom: ['on']
          * Tesla Fleet:  ['on']
          * Tesla BLE:    ['SAE', 'IEC']
          * OCPP:         ['Preparing', 'Charging', 'SuspendedEV', 'SuspendedEVSE', 'Finishing']
          * User custom:  ***Not defined***
      default: "[]"
      selector:
        text:

    charger_on_off_switch:
      name: Charger on/off switch
      description: >
        Switch to turn charger on or off.
        Config is automatically defined for the selected API unless it is marked as ***Not defined***.
          * Tesla Custom: switch.[CarName_]charger
          * Tesla Fleet:  switch.[CarName_]charge
          * Tesla BLE:    switch.tesla_ble_[vin]_charger
          * OCPP:         switch.[ChargerName]_charge_control
          * User custom:  ***Not defined***
      default: switch.user_custom
      selector:
        entity:
          domain: switch

    charger_charging_sensor:
      name: Charger charging sensor
      description: >
        Sensor to check if charger is charging.
        States are defined in "Charger charging state list".
        Config is automatically defined for the selected API unless it is marked as ***Not defined***.
          * Tesla Custom: binary_sensor.[CarName_]charging
          * Tesla Fleet:  sensor.[CarName_]charging
          * Tesla BLE:    sensor.tesla_ble_[vin]_charging_state
          * OCPP:         sensor.[ChargerName]_status_connector
          * User custom:  ***Not defined***
      default: binary_sensor.user_custom
      selector:
        entity:
          domain:
            - binary_sensor
            - sensor

    charger_charging_state_list:
      name: Charger charging state list
      description: >
        Define list of charger charging states.
        List must be in square brackets, and states in single quotes and comma separated.
        Config is automatically defined for the selected API unless it is marked as ***Not defined***.
          * Tesla Custom: ['on']
          * Tesla Fleet:  ['charging']
          * Tesla BLE:    ['Charging']
          * OCPP:         ['Charging', 'SuspendedEV', 'SuspendedEVSE']
          * User custom:  ***Not defined***
      default: "[]"
      selector:
        text:

    charger_charging_amps:
      name: Charger current
      description: >
        Entity to control current in Ampere used to charge the battery.
        Config is automatically defined for the selected API unless it is marked as ***Not defined***.
          * Tesla Custom: number.[CarName_]charging_amps
          * Tesla Fleet:  number.[CarName_]charge_current
          * Tesla BLE:    number.tesla_ble_[vin]_charging_current
          * OCPP:         sensor.[ChargerName]_current_import (read-only)
          * User custom:  ***Not defined***
      default: number.user_custom
      selector:
        entity:
          domain:
            - number
            - sensor

    #####################################
    # EV specific control entities
    #####################################
    battery_level_sensor:
      name: Battery level sensor (optional)
      description: >
        Sensor that reports car battery charge level.
        This can be EV specific sensor or OCPP sensor provided the appropiate HA integration is installed.
        The OCPP charger implementation of this sensor might not be reliable.
        If sensor is not supported by EV specific API, then set charge limit in EV to control when to stop charging.
        Config is automatically defined for the selected API unless it is marked as ***Not defined***.
          * Tesla Custom: sensor.[CarName_]battery
          * Tesla Fleet:  sensor.[CarName_]battery_level
          * Tesla BLE:    sensor.tesla_ble_[vin]_battery_level
          * OCPP:         ***Not defined*** (sensor.[ChargerName]_soc)
          * User custom:  ***Not defined***
      default: sensor.user_custom
      selector:
        entity:
          domain: sensor

    battery_charge_limit:
      name: Battery charge limit (optional)
      description: >
        Entity to control car battery charge limit in percentage (100% = fully charged).
        If setting charge limit is not supported by the selected API, then set number helper here to keep track of charge limit.
        EV battery level sensor must be supported by the selected API, otherwise charge limit entity is ignored, and charge limit set in EV will control when to stop charging.
        Config is automatically defined for the selected API unless it is marked as ***Not defined***.
          * Tesla Custom: number.[CarName_]charge_limit
          * Tesla Fleet:  number.[CarName_]charge_limit
          * Tesla BLE:    number.tesla_ble_[vin]_charging_limit
          * OCPP:         ***Not defined***
          * User custom:  ***Not defined***
      default: number.user_custom
      selector:
        entity:
          domain:
            - number
            - input_number

    car_location_tracker:
      name: EV location tracker (optional)
      description: >
        The entity that provides the location of car.
        States are defined in "EV at home state list".
        EV specific integration must be installed to use this entity.
        Important that home location is defined in Home Assistant.
        Config is automatically defined for the selected API unless it is marked as ***Not defined***.
          * Tesla Custom: device_tracker.[CarName_]location_tracker
          * Tesla Fleet:  device_tracker.[CarName_]location
          * Tesla BLE:    ***Not defined*** (binary_sensor.tesla_ble_[vin]_presence)
          * OCPP:         Not required
          * User custom:  ***Not defined***
      default: binary_sensor.user_custom
      selector:
        entity:
          domain:
            - device_tracker
            - binary_sensor

    car_at_home_state_list:
      name: EV at home state list (optional)
      description: >
        Define list of car-at-home states.
        List must be in square brackets, and states in single quotes and comma separated.
        Config is automatically defined for the selected API unless it is marked as ***Not defined***.
          * Tesla Custom: ['home']
          * Tesla Fleet:  ['home']
          * Tesla BLE:    ***Not defined*** (['on'])
          * OCPP:         ***Not defined***
          * User custom:  ***Not defined***
      default: "[]"
      selector:
        text:

    car_button_wake_up:
      name: EV button wake up (optional)
      description: >
        Button to wake up car.
        EV specific integration must be installed to use this entity.
        Config is automatically defined for the selected API unless it is marked as ***Not defined***.
          * Tesla Custom: button.[CarName_]wake_up
          * Tesla Fleet:  button.[CarName_]wake
          * Tesla BLE:    button.tesla_ble_[vin]_wake_up_car
          * OCPP:         ***Not defined***
          * User custom:  ***Not defined***
      default: button.user_custom
      selector:
        entity:
          domain: button

    car_button_forceupdate_ha:
      name: EV button force update Home Assistant (optional)
      description: >
        Button to force update sensors in Home Assistant with values from car.
        EV specific integration must be installed to use this entity.
        Config is automatically defined for the selected API unless it is marked as ***Not defined***.
          * Tesla Custom: button.[CarName_]force_data_update
          * Tesla Fleet:  ***Not defined*** (See [suggestion](https://github.com/flashg1/evSolarCharger/wiki/Configuration#tesla-fleet-api-charging-status-not-up-to-date). See [vehicle sleep](https://www.home-assistant.io/integrations/tesla_fleet/#vehicle-sleep) for [polling](https://www.home-assistant.io/common-tasks/general/#defining-a-custom-polling-interval) and [cost](https://alerts.home-assistant.io/alerts/tesla_fleet/).)
          * Tesla BLE:    button.tesla_ble_[vin]_force_update_charge (Enable in Settings > Devices & services > MQTT > Entities)
          * OCPP:         ***Not defined***
          * User custom:  ***Not defined***
      default: button.user_custom
      selector:
        entity:
          domain:
            - button
            - input_button

###############################################################################
# Trigger variables
###############################################################################
# Trigger variables must be defined here because triggers and conditions do not have access to global variables at time of trigger.
# Trigger variables are global variables.
trigger_variables:

  #####################################
  # API return codes
  #####################################
  # Tesla Custom API entities
  # binary_sensor.charger: on, off
  # binary_sensor.charging: on, off
  rc_tcustom_connect_trigger: "{{ ['on'] }}"
  rc_tcustom_charger_connected: "{{ rc_tcustom_connect_trigger }}"
  rc_tcustom_charging_state: "{{ ['on'] }}"
  rc_tcustom_car_at_home: "{{ ['home'] }}"

  # Tesla Fleet API entities
  # binary_sensor.charge_cable: on, off
  # sensor.charging: starting, charging, stopped, complete, disconnected, no_power
  rc_tfleet_connect_trigger: "{{ ['on'] }}"
  rc_tfleet_charger_connected: "{{ rc_tfleet_connect_trigger }}"
  rc_tfleet_charging_state: "{{ ['charging'] }}"
  rc_tfleet_car_at_home: "{{ ['home'] }}"

  # BLE entities
  # sensor.tesla_ble_vin_charge_cable: No, SAE, IEC
  # sensor.tesla_ble_vin_charging_state: Disconnected, Complete (reached charge limit but charger is not turned off), Charging, Stopped (charger turned off)
  # binary_sensor.tesla_ble_vin_presence: on=home, off=away (sensor not 100% accurate)
  # For BLE, charger is still turned on after reaching charge limit, ie. charging status=complete
  rc_ble_connect_trigger: "{{ ['SAE', 'IEC'] }}"
  rc_ble_charger_connected: "{{ rc_ble_connect_trigger }}"
  rc_ble_charging_state: "{{ ['Charging'] }}"
  rc_ble_car_at_home: "{{ ['on'] }}"

  # See OCPP spec v1.6j page 38 transition states, and page 77 ChargePointStatus (sensor.charger_status_connector).
  # Available (no EV connected)
  # Preparing (EV plugged in but charging yet to start)
  # Charging (EV plugged in with active charging session)
  # SuspendedEV (EV plugged in but not accepting charge, eg. EV getting ready, charge limit reached)
  # SuspendedEVSE (EV plugged in but EVSE does not allow charging, eg. current drops below 6A)
  # Finishing (EV plugged in but charging session ending, ie. charger switched off)
  # OCPP uses single sensor to indicate plugged in and charging
  # Use 'Available' state for trigger testing with IAMMeter. Just need to turn on then off OCPP "Charge Control" to trigger the automation.
  # rc_ocpp_connect_trigger: "{{ ['Available', 'Preparing'] }}"
  # Add 'Available' to rc_ocpp_charger_connected for normal testing, and switch off charger to exit automation.
  # rc_ocpp_charger_connected: "{{ rc_ocpp_connect_trigger + rc_ocpp_charging_state + rc_ocpp_charger_done + ['Available'] }}"
  rc_ocpp_connect_trigger: "{{ ['Preparing'] }}"
  rc_ocpp_charging_state: "{{ ['Charging', 'SuspendedEV', 'SuspendedEVSE'] }}"
  rc_ocpp_charger_done: "{{ ['Finishing'] }}"
  rc_ocpp_charger_connected: "{{ rc_ocpp_connect_trigger + rc_ocpp_charging_state + rc_ocpp_charger_done }}"

  #####################################
  # Charge control API
  #####################################
  # https://community.home-assistant.io/t/how-to-use-if-then-statements-to-create-dictionary-variables-in-scripts/688152
  # https://community.home-assistant.io/t/return-a-variable-which-is-a-dictionary-in-script-to-automation/796744/5
  # No duplicate variable names in the same variable section, otherwise automation cannot start. Check log for duplicate variable error.

  k_tesla_custom_api: "k_tesla_custom_api"
  k_tesla_fleet_api: "k_tesla_fleet_api"
  k_tesla_blemqtt_api: "k_tesla_blemqtt_api"
  k_ocpp_charger_api: "k_ocpp_charger_api"
  k_user_custom_api: "k_user_custom_api"

  k_charger_connect_state: "k_charger_connect_state"
  k_charger_connect_trigger_list: "k_charger_connect_trigger_list"
  k_charger_connected_state_list: "k_charger_connected_state_list"
  k_charger_onoff_switch: "k_charger_onoff_switch"
  k_charger_charge_state: "k_charger_charge_state"
  k_charger_charging_state_list: "k_charger_charging_state_list"
  k_charger_current: "k_charger_current"
  k_battery_level: "k_battery_level"
  k_charge_limit: "k_charge_limit"
  k_ev_home_state: "k_ev_home_state"
  k_ev_at_home_state_list: "k_ev_at_home_state_list"
  k_ev_wake_up: "k_ev_wake_up"
  k_ev_status_update: "k_ev_status_update"

  i_chargerConnectState: !input charger_plugged_in_sensor
  i_chargerConnectTriggerList: !input charger_connect_trigger_list
  i_chargerConnectedStateList: !input charger_connected_state_list
  i_chargerSwitch: !input charger_on_off_switch
  i_chargerChargeState: !input charger_charging_sensor
  i_chargerChargingStateList: !input charger_charging_state_list
  i_chargerAmp: !input charger_charging_amps
  i_batteryLevel: !input battery_level_sensor
  i_batteryChargeLimit: !input battery_charge_limit
  i_evHomeState: !input car_location_tracker
  i_evAtHomeStateList: !input car_at_home_state_list
  i_evWakeUp: !input car_button_wake_up
  i_evForceUpdateHa: !input car_button_forceupdate_ha

  i_teslaCarName: !input tesla_car_name
  teslaCarName: >
    {% if i_teslaCarName == "" %}
      {{ i_teslaCarName }}
    {% else %}
      {{ i_teslaCarName | lower }}_
    {% endif %}
  teslaCustomApi:
    k_charger_connect_state: "binary_sensor.{{ teslaCarName }}charger"
    k_charger_connect_trigger_list: "{{ rc_tcustom_connect_trigger }}"
    k_charger_connected_state_list: "{{ rc_tcustom_charger_connected }}"
    k_charger_onoff_switch: "switch.{{ teslaCarName }}charger"
    k_charger_charge_state: "binary_sensor.{{ teslaCarName }}charging"
    k_charger_charging_state_list: "{{ rc_tcustom_charging_state }}"
    k_charger_current: "number.{{ teslaCarName }}charging_amps"
    k_battery_level: "sensor.{{ teslaCarName }}battery"
    k_charge_limit: "number.{{ teslaCarName }}charge_limit"
    k_ev_home_state: "device_tracker.{{ teslaCarName }}location_tracker"
    k_ev_at_home_state_list: "{{ rc_tcustom_car_at_home }}"
    k_ev_wake_up: "button.{{ teslaCarName }}wake_up"
    k_ev_status_update: "button.{{ teslaCarName }}force_data_update"

  teslaFleetApi:
    k_charger_connect_state: "binary_sensor.{{ teslaCarName }}charge_cable"
    k_charger_connect_trigger_list: "{{ rc_tfleet_connect_trigger }}"
    k_charger_connected_state_list: "{{ rc_tfleet_charger_connected }}"
    k_charger_onoff_switch: "switch.{{ teslaCarName }}charge"
    k_charger_charge_state: "sensor.{{ teslaCarName }}charging"
    k_charger_charging_state_list: "{{ rc_tfleet_charging_state }}"
    k_charger_current: "number.{{ teslaCarName }}charge_current"
    k_battery_level: "sensor.{{ teslaCarName }}battery_level"
    k_charge_limit: "number.{{ teslaCarName }}charge_limit"
    k_ev_home_state: "device_tracker.{{ teslaCarName }}location"
    k_ev_at_home_state_list: "{{ rc_tfleet_car_at_home }}"
    k_ev_wake_up: "button.{{ teslaCarName }}wake"
    k_ev_status_update: "{{ i_evForceUpdateHa }}"

  i_bleVinId: !input ble_vin_id
  bleVinId: "{{ i_bleVinId | lower }}"
  teslaBleMqttApi:
    k_charger_connect_state: "sensor.tesla_ble_{{ bleVinId }}_charge_cable"
    k_charger_connect_trigger_list: "{{ rc_ble_connect_trigger }}"
    k_charger_connected_state_list: "{{ rc_ble_charger_connected }}"
    k_charger_onoff_switch: "switch.tesla_ble_{{ bleVinId }}_charger"
    k_charger_charge_state: "sensor.tesla_ble_{{ bleVinId }}_charging_state"
    k_charger_charging_state_list: "{{ rc_ble_charging_state }}"
    k_charger_current: "number.tesla_ble_{{ bleVinId }}_charging_current"
    k_battery_level: "sensor.tesla_ble_{{ bleVinId }}_battery_level"
    k_charge_limit: "number.tesla_ble_{{ bleVinId }}_charging_limit"
    k_ev_home_state: "{{ i_evHomeState }}"
    k_ev_at_home_state_list: "{{ i_evAtHomeStateList }}"
    k_ev_wake_up: "button.tesla_ble_{{ bleVinId }}_wake_up_car"
    k_ev_status_update: "button.tesla_ble_{{ bleVinId }}_force_update_charge"

  i_ocppChargerName: !input ocpp_charger_name
  ocppChargerName: "{{ i_ocppChargerName | lower }}"
  e_ocppChargerId: "sensor.{{ ocppChargerName }}_id"
  e_ocppChargerTransactionId: "sensor.{{ ocppChargerName }}_transaction_id"
  ocppChargerApi:
    k_charger_connect_state: "sensor.{{ ocppChargerName }}_status_connector"
    k_charger_connect_trigger_list: "{{ rc_ocpp_connect_trigger }}"
    k_charger_connected_state_list: "{{ rc_ocpp_charger_connected }}"
    k_charger_onoff_switch: "switch.{{ ocppChargerName }}_charge_control"
    k_charger_charge_state: "sensor.{{ ocppChargerName }}_status_connector"
    k_charger_charging_state_list: "{{ rc_ocpp_charging_state }}"
    k_charger_current: "sensor.{{ ocppChargerName }}_current_import"
    k_battery_level: "{{ i_batteryLevel }}"
    k_charge_limit: "{{ i_batteryChargeLimit }}"
    k_ev_home_state: "{{ i_evHomeState }}"
    k_ev_at_home_state_list: "{{ i_evAtHomeStateList }}"
    k_ev_wake_up: "{{ i_evWakeUp }}"
    k_ev_status_update: "{{ i_evForceUpdateHa }}"

  userCustomApi:
    k_charger_connect_state: "{{ i_chargerConnectState }}"
    k_charger_connect_trigger_list: "{{ i_chargerConnectTriggerList }}"
    k_charger_connected_state_list: "{{ i_chargerConnectedStateList }}"
    k_charger_onoff_switch: "{{ i_chargerSwitch }}"
    k_charger_charge_state: "{{ i_chargerChargeState }}"
    k_charger_charging_state_list: "{{ i_chargerChargingStateList }}"
    k_charger_current: "{{ i_chargerAmp }}"
    k_battery_level: "{{ i_batteryLevel }}"
    k_charge_limit: "{{ i_batteryChargeLimit }}"
    k_ev_home_state: "{{ i_evHomeState }}"
    k_ev_at_home_state_list: "{{ i_evAtHomeStateList }}"
    k_ev_wake_up: "{{ i_evWakeUp }}"
    k_ev_status_update: "{{ i_evForceUpdateHa }}"

  chargeApiMap:
    k_tesla_custom_api: "{{ teslaCustomApi }}"
    k_tesla_fleet_api: "{{ teslaFleetApi }}"
    k_tesla_blemqtt_api: "{{ teslaBleMqttApi }}"
    k_ocpp_charger_api: "{{ ocppChargerApi }}"
    k_user_custom_api: "{{ userCustomApi }}"

  chargeApiKey: !input select_charge_control_api
  chargeApi: "{{ chargeApiMap[chargeApiKey] }}"

###############################################################################
# Triggers and conditions
# Note:
# - Tesla triggers do not update often due to infrequent polling.
#   See https://github.com/alandtse/tesla/wiki/Polling-policy
###############################################################################
triggers:
  # Trigger action if just plugged in.
  - trigger: template
    value_template: "{{ states(chargeApi[k_charger_connect_state]) in chargeApi[k_charger_connect_trigger_list] }}"

  # Trigger action at elevation after sunrise.
  - trigger: numeric_state
    entity_id: sun.sun
    attribute: elevation
    above: !input sunrise_elevation_start_trigger

  # Trigger action to meet oneoff charge schedule.
  - trigger: time
    at: !input next_charge_time_trigger

conditions:
  # Car must be at location. OCPP charger will know when it is plugged in at location.
  - condition: template
    value_template: >
      {% if has_value(chargeApi[k_ev_home_state]) %}
        {{ states(chargeApi[k_ev_home_state]) in chargeApi[k_ev_at_home_state_list] }}
      {% else %}
        {{ true }}
      {% endif %}

  # Charger must be plugged in.
  - condition: template
    value_template: "{{ states(chargeApi[k_charger_connect_state]) in chargeApi[k_charger_connected_state_list] }}"

###############################################################################
# Global constants and site specific variables
# https://community.home-assistant.io/t/why-the-heck-dont-we-have-global-variables/219671/86
# https://github.com/rogro82/hass-variables
###############################################################################
variables:

  #####################################
  # Constants
  #####################################
  # Tesla UMC charger initial minimum charging current is 5A, after that it can vary between 0A and 15A.
  # Tesla UMC charger initial minimum charging current is 6A.
  initial_charge_current: 6
  
  # Time to wait in seconds for car to wake up.
  wait_car_wakeup: 40

  # Time to wait in seconds to turn charger on or off.
  # To switch on charger from 2V to 230V and then ram up current, it took 16 seconds for initial_charge_current 15A.
  # To switch on charger from 2V to 230V and then ram up current, it took 11 seconds for initial_charge_current 6A.
  wait_charger_on: 11
  wait_charger_off: 5

  # Time to wait in seconds for current to change after sending command.
  #wait_current_change: "00:00:0.3"
  wait_current_change: 1
  #wait_current_change_str: "00:00:{{ wait_current_change }}"

  # Wait in seconds after setting car charge limit.
  wait_charge_limit: 5

  # Valid charge limit range for Tesla API, otherwise will get following error,
  # Error: Value 0.0 for number.charge_limit is outside valid range 50 - 100
  charge_limit_min: 50
  charge_limit_max: 100
  charge_limit_default: 60
  charge_completion_time_default: '00:00:00'

  # Sunrise is defined as the instant when the upper limb of the sun's disk is just touching the horizon, which corresponds to a solar altitude of -0.833 degrees.
  # For Sydney on 28/4/2025, sunrise at 6:28am, 6 degree elevation at 07:01:43am, (07:01:43 - 6:28:00) / (0.833 + 6) = 296.063 seconds/degree
  secondsPerDegreeSunrise: 296.063
  centreOfSunDegreeBelowHorizonAtSunrise: 0.833

  #####################################
  # Inputs
  #####################################
  # Wait in seconds after issuing update status command to update HA. 
  # Extra delay required for BLE MQTT to register change in charging state. Need minimum 8 seconds for Tesla BLE.
  waitApiUpdateHa: !input wait_status_update

  chargerMaxCurrent: !input charger_max_current
  chargerMinWorkableCurrent: !input charger_min_workable_current

  # The skew shifts the power export/import curve left or right defining the range where power can fluctuate without causing charger current adjustment. 
  # The higher the skew, the lesser the chance to import power and more likely to export power.
  # Skew should be kept between 0 and 1 inclusive.
  # It defines the 230W buffer range in which allPowerNet can fluctuate without causing charger current adjustment.
  #
  # Lower skewed power = P*skew*(-1) - P/2
  # Upper skewed power = P*skew*(-1) + P/2
  # where P = oneAmpWattStep = e_chargerEffectiveVoltage * 1A, eg. 230W
  #
  # To test current decrease by 1A with skew=+0.3, set e_mainPowerNet=47W
  # To test current increase by 1A with skew=+0.3, set e_mainPowerNet=-185W
  #
  # Skew  Power fluctuation range     Comment
  # ----------------------------------------------------------------
  # +2    -575  < allPowerNet < -345  Fluctuates below 0W decreases power draw
  # +1    -345  < allPowerNet < -115
  # +0.7  -276  < allPowerNet < -46
  # +0.5  -230  < allPowerNet < 0
  # +0.3  -184  < allPowerNet < +46
  # 0     -115  < allPowerNet < +115  Fluctuates symmetrically around 0W
  # -1    +115  < allPowerNet < +345
  # -2    +345  < allPowerNet < +575  Fluctuates above 0W increases power draw
  powerDrawSkew: !input power_draw_skew
  
  sunriseElevationStartTrigger: !input sunrise_elevation_start_trigger
  sunsetElevationEndTrigger: !input sunset_elevation_end_trigger
  e_nextChargeTimeTrigger: !input next_charge_time_trigger

  #####################################
  # e_ => External entities
  # Must use states() to access external entities.
  # Must not use states() to access local variables.
  #####################################
  # sensor_main_power_net expresses negative value in Watts for available power for charging car or positive value for consumed power.
  e_mainPowerNet: !input sensor_main_power_net

  e_chargerEffectiveVoltage: !input charger_effective_voltage
  e_chargerMinCurrent: !input charger_min_current
  e_powerOffsetFromZero: !input power_offset_from_zero
  e_useSecondaryPowerSource: !input toggle_secondary_power_source
  e_stopCharger: !input toggle_stop_charger

  #####################################
  # Set car charge limit based on which week day
  #####################################
  i_setDailyChargeLimit: !input toggle_set_daily_charge_limit
  setDailyChargeLimit: "{% if has_value(i_setDailyChargeLimit) %}{{ states(i_setDailyChargeLimit) }}{% else %}{{ 'off' }}{% endif %}"
  # Used to estimate charge completion time. For Tesla M3, charge rate for 15A = 23.7km/hr, 409.625km=100%=17.28hr, 1%=0.1728hr
  i_batteryMaxChargeSpeed: !input battery_max_charge_speed
  batteryMaxChargeSpeed: "{% if has_value(i_batteryMaxChargeSpeed) %}{{ states(i_batteryMaxChargeSpeed) | float }}{% else %}{{ 0.1631 }}{% endif %}"
  onePercentChargeDuration: "{{ batteryMaxChargeSpeed * 60 * 60 }}"

  i_chargeLimitMon: !input charge_limit_monday
  i_chargeLimitTue: !input charge_limit_tuesday
  i_chargeLimitWed: !input charge_limit_wednesday
  i_chargeLimitThu: !input charge_limit_thursday
  i_chargeLimitFri: !input charge_limit_friday
  i_chargeLimitSat: !input charge_limit_saturday
  i_chargeLimitSun: !input charge_limit_sunday

  i_chargeCompletionTimeMon: !input charge_completion_time_monday
  i_chargeCompletionTimeTue: !input charge_completion_time_tuesday
  i_chargeCompletionTimeWed: !input charge_completion_time_wednesday
  i_chargeCompletionTimeThu: !input charge_completion_time_thursday
  i_chargeCompletionTimeFri: !input charge_completion_time_friday
  i_chargeCompletionTimeSat: !input charge_completion_time_saturday
  i_chargeCompletionTimeSun: !input charge_completion_time_sunday

  todayIndex: "{{ now().weekday() }}"
  tomorrowIndex: "{{ ( now().weekday() + 1 ) % 7 }}"

  k_chargeLimit: "k_chargeLimit"
  k_chargeCompletionTime: "k_chargeCompletionTime"

  # Use separate automation to restore defaults.
  chargeLimitMon:
    k_chargeLimit: "{% if has_value(i_chargeLimitMon) %}{{ states(i_chargeLimitMon) | int }}{% else %}{{ charge_limit_default }}{% endif %}"
    k_chargeCompletionTime: "{% if has_value(i_chargeCompletionTimeMon) %}{{ states(i_chargeCompletionTimeMon) }}{% else %}{{ charge_completion_time_default }}{% endif %}"
  chargeLimitTue:
    k_chargeLimit: "{% if has_value(i_chargeLimitTue) %}{{ states(i_chargeLimitTue) | int }}{% else %}{{ charge_limit_default }}{% endif %}"
    k_chargeCompletionTime: "{% if has_value(i_chargeCompletionTimeTue) %}{{ states(i_chargeCompletionTimeTue) }}{% else %}{{ charge_completion_time_default }}{% endif %}"
  chargeLimitWed:
    k_chargeLimit: "{% if has_value(i_chargeLimitWed) %}{{ states(i_chargeLimitWed) | int }}{% else %}{{ charge_limit_default }}{% endif %}"
    k_chargeCompletionTime: "{% if has_value(i_chargeCompletionTimeWed) %}{{ states(i_chargeCompletionTimeWed) }}{% else %}{{ charge_completion_time_default }}{% endif %}"
  chargeLimitThu:
    k_chargeLimit: "{% if has_value(i_chargeLimitThu) %}{{ states(i_chargeLimitThu) | int }}{% else %}{{ charge_limit_default }}{% endif %}"
    k_chargeCompletionTime: "{% if has_value(i_chargeCompletionTimeThu) %}{{ states(i_chargeCompletionTimeThu) }}{% else %}{{ charge_completion_time_default }}{% endif %}"
  chargeLimitFri:
    k_chargeLimit: "{% if has_value(i_chargeLimitFri) %}{{ states(i_chargeLimitFri) | int }}{% else %}{{ charge_limit_default + 10 }}{% endif %}"
    k_chargeCompletionTime: "{% if has_value(i_chargeCompletionTimeFri) %}{{ states(i_chargeCompletionTimeFri) }}{% else %}{{ charge_completion_time_default }}{% endif %}"
  chargeLimitSat:
    k_chargeLimit: "{% if has_value(i_chargeLimitSat) %}{{ states(i_chargeLimitSat) | int }}{% else %}{{ charge_limit_default + 10 }}{% endif %}"
    k_chargeCompletionTime: "{% if has_value(i_chargeCompletionTimeSat) %}{{ states(i_chargeCompletionTimeSat) }}{% else %}{{ charge_completion_time_default }}{% endif %}"
  chargeLimitSun:
    k_chargeLimit: "{% if has_value(i_chargeLimitSun) %}{{ states(i_chargeLimitSun) | int }}{% else %}{{ charge_limit_default }}{% endif %}"
    k_chargeCompletionTime: "{% if has_value(i_chargeCompletionTimeSun) %}{{ states(i_chargeCompletionTimeSun) }}{% else %}{{ charge_completion_time_default }}{% endif %}"

  # List of charge limit configs
  chargeLimitList: "{{ [chargeLimitMon, chargeLimitTue, chargeLimitWed, chargeLimitThu, chargeLimitFri, chargeLimitSat, chargeLimitSun] }}"
  triggerEntityId: "{{ trigger.entity_id }}"
  isSelfTriggered: "{{ triggerEntityId == e_nextChargeTimeTrigger }}"

  #####################################
  # Set car charge limit based on weather forecast
  #####################################
  i_adjustChargeLimitBasedOnWeather: !input adjust_charge_limit_based_on_weather
  adjustChargeLimitBasedOnWeather: "{% if has_value(i_adjustChargeLimitBasedOnWeather) %}{{ states(i_adjustChargeLimitBasedOnWeather) }}{% else %}{{ 'off' }}{% endif %}"

  e_weatherProvider: !input weather_provider
  forecastIndex: !input forecast_index
  forecastAttribute: !input forecast_attribute
  chargeLimitOnBadWeather: !input charge_limit_on_bad_weather

  # Not all intervals are available for all providers. Possible values: "hourly", "twice_daily", "daily"
  forecastInterval: "daily"

###############################################################################
# Actions
###############################################################################
actions:

  #####################################
  # Global action variables
  #####################################
  - variables:
      useTeslaCustomApi: "{{ chargeApiKey == k_tesla_custom_api }}"
      useTeslaFleetApi: "{{ chargeApiKey == k_tesla_fleet_api }}"
      useBleMqttApi: "{{ chargeApiKey == k_tesla_blemqtt_api }}"
      useOcppChargerApi: "{{ chargeApiKey == k_ocpp_charger_api }}"
      useUserCustomApi: "{{ chargeApiKey == k_user_custom_api }}"

      e_chargerConnectState: "{{ chargeApi[k_charger_connect_state] }}"
      rc_chargerConnectTriggerList: "{{ chargeApi[k_charger_connect_trigger_list] }}"
      rc_chargerConnectedStateList: "{{ chargeApi[k_charger_connected_state_list] }}"
      e_chargerSwitch: "{{ chargeApi[k_charger_onoff_switch] }}"
      e_chargerChargeState: "{{ chargeApi[k_charger_charge_state] }}"
      rc_chargerChargingStateList: "{{ chargeApi[k_charger_charging_state_list] }}"
      e_chargerAmp: "{{ chargeApi[k_charger_current] }}"
      e_batteryLevel: "{{ chargeApi[k_battery_level] }}"
      e_chargeLimit: "{{ chargeApi[k_charge_limit] }}"
      e_evHomeState: "{{ chargeApi[k_ev_home_state] }}"
      rc_evAtHomeStateList: "{{ chargeApi[k_ev_at_home_state_list] }}"
      e_evWakeUp: "{{ chargeApi[k_ev_wake_up] }}"
      e_evForceUpdateHa: "{{ chargeApi[k_ev_status_update] }}"

      # Self-triggered automation usually need to run at night to meet charge limit at charge end time.
      # Self-triggered automation will try to reach charge limit at charge end time using solar and/or grid.
      # For charge limit with charge end time, today = 00:00 to sunset, tomorrow = sunset to 00:00.
      # For charge limit without charge end time, today = 00:00 to 23:59.  Reaching charge limit is best effort only and depends on solar.
      sunsetTime: "{{ state_attr('sun.sun', 'next_setting') | as_timestamp | timestamp_custom('%H:%M:%S') }}"
      todaySunset: "{{ today_at(sunsetTime) }}"
      isToday: >
        {% if isSelfTriggered %}
          {{ now() < (todaySunset | as_datetime) }}
        {% else %}
          {{ true }}
        {% endif %}

      chargeLimitConfig: >
        {% if isToday %}
          {{ chargeLimitList[todayIndex] }}
        {% else %}
          {{ chargeLimitList[tomorrowIndex] }}
        {% endif %}

      chargeEndTime: >
        {% if isToday %}
          {{ today_at(chargeLimitConfig[k_chargeCompletionTime]) }}
        {% else %}
          {{ today_at(chargeLimitConfig[k_chargeCompletionTime]) + timedelta(days = 1) }}
        {% endif %}

      # Need to meet charge end time?
      hasChargeEndTime: >
        {% if setDailyChargeLimit == 'on' %}
          {{ chargeLimitConfig[k_chargeCompletionTime] != charge_completion_time_default }}
        {% else %}
          {{ false }}
        {% endif %}

      debug_blueprintConfig: |
        myName = {{ this.entity_id }}
        triggerEntityId = {{ triggerEntityId }}
        isSelfTriggered = {{ isSelfTriggered }}
        batteryMaxChargeSpeed = {{ batteryMaxChargeSpeed }}
        onePercentChargeDuration = {{ onePercentChargeDuration }}
        chargerMinWorkableCurrent = {{ chargerMinWorkableCurrent }}
        chargeApiKey = {{ chargeApiKey }}

      debug_chargeLimitConfig: |
        setDailyChargeLimit = {{ setDailyChargeLimit }}
        adjustChargeLimitBasedOnWeather = {{ adjustChargeLimitBasedOnWeather }}
        chargeLimitOnBadWeather = {{ chargeLimitOnBadWeather }}
        chargeLimitList = {{ chargeLimitList }}
        todayIndex = {{ todayIndex }}
        tomorrowIndex = {{ tomorrowIndex }}
        todaySunset = {{ todaySunset }}
        isToday = {{ isToday }}
        chargeLimitConfig = {{ chargeLimitConfig }}
        chargeEndTime = {{ chargeEndTime }}
        hasChargeEndTime = {{ hasChargeEndTime }}

  #####################################
  # Init car
  #####################################
  - if:
      - condition: template
        value_template: "{{ has_value(e_evWakeUp) }}"
    then:
      - action: button.press
        data: {}
        target:
          entity_id: "{{ e_evWakeUp }}"
      - delay: "{{ wait_car_wakeup }}"

  # Get the latest data from car to update HA.
  - if:
      - condition: template
        value_template: "{{ has_value(e_evForceUpdateHa) }}"
    then:
      - action: "{{ states[e_evForceUpdateHa]['domain'] }}.press"
        data: {}
        target:
          entity_id: "{{ e_evForceUpdateHa }}"
      # No need to move status wait out of if statement because this is API specific.
      - delay: "{{ waitApiUpdateHa }}"

  # Sanity check in case of manual run.
  # Do not manually run this script if car is not at home, because it affects car charging anywhere.
  - if:
      - condition: template
        value_template: "{{ has_value(e_evHomeState) and not states(e_evHomeState) in rc_evAtHomeStateList }}"
    then:
      - stop: "Exiting script because car is not at home, otherwise the script will affect car if charging elsewhere."

  #####################################
  # Set car charge limit on start up
  #####################################
  # Should honour existing charge limit set by app or car, unless set daily car charge limit is toggled on.
  #
  # If set daily car charge limit is toggled off, charge limit will be set according to the Tesla app.
  # If set daily car charge limit is toggled on and charge car based on weather is disabled, charge limit will be set according to the limit configured for the day.
  # If set daily car charge limit is toggled on and charge car based on weather is enabled, charge limit will be adjusted to the highest limit set within the rainy forecast period taking into account the car charge limit on bad weather setting.
  #
  # If charge car based on weather is enabled, daily car charge limit and weather provider settings must be configured.
  - choose:
    - conditions:
        - alias: "If set daily charge limit on start up"
          condition: template
          value_template: "{{ setDailyChargeLimit == 'on' }}"

      # Then set charge limit base on config
      sequence:
        - if:
            - alias: "If adjust charge limit based on weather"
              condition: template
              value_template: "{{ adjustChargeLimitBasedOnWeather == 'on' }}"
          then:
            - alias: "Then get weather forecast data"
              action: weather.get_forecasts
              target:
                entity_id: "{{ e_weatherProvider }}"
              data:
                type: "{{ forecastInterval }}"
              response_variable: weather_forecast

        - variables:
            # Period forecast list excluding today
            periodForecastList: >
              {% set data = namespace(strings=[]) %}
              {% if adjustChargeLimitBasedOnWeather == 'on' %}
                {% for day in range(1, forecastIndex + 1, 1) %}
                  {% set data.strings = data.strings + [weather_forecast[e_weatherProvider]['forecast'][day][forecastAttribute]] %}
                {% endfor %}
              {% endif %}
              {{ data.strings }}

            weatherToday: >
              {% if adjustChargeLimitBasedOnWeather == 'on' %}
                {{ weather_forecast[e_weatherProvider]['forecast'][0][forecastAttribute] }}
              {% else %}
                {{ "weather forecast disabled" }}
              {% endif %}

            # Charge limit list for the next N days excluding today. Also take into account chargeLimitOnBadWeather.
            badWeatherPeriodChargeLimitList: >
              {% set data = namespace(numbers=[chargeLimitOnBadWeather]) %}
              {% for i in range(1, forecastIndex + 1, 1) %}
                {% set day = (todayIndex + i) % 7 %}
                {% set data.numbers = data.numbers + [chargeLimitList[day][k_chargeLimit]] %}
              {% endfor %}
              {{ data.numbers }}

            badWeatherPeriodMaxChargeLimit: "{{ badWeatherPeriodChargeLimitList | max }}"

            todayChargeLimit: "{{ chargeLimitConfig[k_chargeLimit] }}"

            # See https://www.home-assistant.io/integrations/weather/
            # Some possible values: rainy, cloudy, partlycloudy, clear-night
            proposeChargeLimit: >
              {% if adjustChargeLimitBasedOnWeather == 'on'
              and 'rainy' in periodForecastList
              and badWeatherPeriodMaxChargeLimit > todayChargeLimit %}
                {{ badWeatherPeriodMaxChargeLimit }}
              {% else %}
                {{ todayChargeLimit }} 
              {% endif %}

            # Look ahead charge limit list including today
            maxChargeLimitDifference: 10
            lookAheadChargeLimitDays: 4
            lookAheadChargeLimitList: >
              {% set data = namespace(numbers=[]) %}
              {% for i in range(0, lookAheadChargeLimitDays, 1) %}
                {% set day = (todayIndex + i) % 7 %}
                {% set data.numbers = data.numbers + [chargeLimitList[day][k_chargeLimit]] %}
              {% endfor %}
              {{ data.numbers }}
            lookAheadMaxChargeLimit: "{{ max(lookAheadChargeLimitList) }}"
            lookAheadMaxChargeLimitIndex: "{{ lookAheadChargeLimitList.index(lookAheadMaxChargeLimit) }}"
            lookAheadChargeLimit: "{{ lookAheadMaxChargeLimit - (lookAheadMaxChargeLimitIndex * maxChargeLimitDifference) }}"

            # Automatically charge more today if today has no charge end time and next 3 days have much higher charge limit.
            finalChargeLimit: >
              {% if not hasChargeEndTime and lookAheadChargeLimit > proposeChargeLimit %}
                {{ lookAheadChargeLimit }}
              {% else %}
                {{ proposeChargeLimit }} 
              {% endif %}

        # Show current status
        # - action: system_log.write
        #   data_template:
        #     message: |-
        #       {{now()}}: 
        #       finalChargeLimit={{finalChargeLimit}}, todayChargeLimit={{todayChargeLimit}}, chargeLimitOnBadWeather={{chargeLimitOnBadWeather}},
        #       badWeatherPeriodMaxChargeLimit={{badWeatherPeriodMaxChargeLimit}}, badWeatherPeriodChargeLimitList={{badWeatherPeriodChargeLimitList}}, periodForecastList={{periodForecastList}},
        #       todayIndex={{todayIndex}}, chargeLimitList={{chargeLimitList}}, weatherToday={{weatherToday}}
        #     #level: warning
        #     level: info

        # Set car charge limit if using EV specific API.
        # Changing charge limit can turn on or off Tesla charger by car depending on whether charge limit has been reached or not.
        # Note: Cannot use number.set_value to set an input_number.
        - if:
            - condition: template
              value_template: "{{ has_value(e_chargeLimit) }}"
          then:
            - action: "{{ states[e_chargeLimit]['domain'] }}.set_value"
              data:
                value: "{{ finalChargeLimit }}"
              target:
                entity_id: "{{ e_chargeLimit }}"
            - delay: "{{ wait_charge_limit }}"

        # Car charger is turned on if setting higher charge limit, so must get latest update before proceeding. Otherwise script can exit without turning off charger.
        - if:
            - condition: template
              value_template: "{{ has_value(e_evForceUpdateHa) }}"
          then:
            - action: "{{ states[e_evForceUpdateHa]['domain'] }}.press"
              data: {}
              target:
                entity_id: "{{ e_evForceUpdateHa }}"
        # Moved status wait out of if statement to apply wait for all after charge limit change.
        # Tesla BLE need 25 seconds here.
        - delay: "{{ waitApiUpdateHa }}"

    # Do nothing. Don't set daily car charge limit. Charge limit must be set by user.
    default:

  #####################################
  # Main while loop
  #####################################
  - variables:
      debug_startingStates: |
        nowTime = {{ now() }}
        e_stopCharger = {% if has_value(e_stopCharger) %}{{ states(e_stopCharger) }}{% else %}{{ 'Not defined' }}{% endif %}
        e_useSecondaryPowerSource = {% if has_value(e_useSecondaryPowerSource) %}{{ states(e_useSecondaryPowerSource) }}{% else %}{{ 'Not defined' }}{% endif %}
        e_sunElevation = {{ state_attr('sun.sun', 'elevation') }}
        e_evHomeState = {% if has_value(e_evHomeState) %}{{ states(e_evHomeState) }}{% else %}{{ 'Not defined' }}{% endif %}
        e_chargerConnectState = {{ states(e_chargerConnectState) }}
        e_chargerSwitch = {{ states(e_chargerSwitch) }}
        e_chargerChargeState = {{ states(e_chargerChargeState) }}
        e_batteryLevel = {% if has_value(e_batteryLevel) %}{{ states(e_batteryLevel) }}{% else %}{{ 'Not defined' }}{% endif %}
        e_chargeLimit = {% if has_value(e_chargeLimit) %}{{ states(e_chargeLimit) }}{% else %}{{ 'Not defined' }}{% endif %}

  - repeat:
      #####################################
      # Only start charging when following conditions are met, otherwise exit script.
      #####################################
      while:
        - condition: and
          conditions:

            - alias: "Continue if stop button is toggled off"
              condition: template
              value_template: >
                {% if has_value(e_stopCharger) %}
                  {{ is_state(e_stopCharger, 'off') }}
                {% else %}
                  {{ true }}
                {% endif %}

            # State entity_id can only work with !input syntax in triggers, conditions and actions sections, ie. cannot be a variable!!! Otherwise will get this error.
            #
            # Blueprint 'EV solar charger automation' generated invalid automation with inputs {'select_charge_control_api': 'k_ocpp_charger_api', 
            # 'sensor_main_power_net': 'input_number.test_power_net', 'toggle_secondary_power_source': 'input_boolean.tesla23m3_charge_from_grid'}: 
            # Entity {{ e_chargerConnectState }} is neither a valid entity ID nor a valid UUID for 
            # dictionary value @ data['actions'][5]['repeat']['while'][0]['conditions'][1]['entity_id']. Got '{{ e_chargerConnectState }}'
            # - alias: "Continue if charger is plugged in"
            #   condition: state
            #   entity_id: !input charger_plugged_in_sensor
            #   # entity_id: "{{ e_chargerConnectState }}"
            #   state:
            #     - "on"
            #     - "Preparing"
            #     - "Charging"

            - alias: "Continue if charger is plugged in"
              condition: template
              value_template: "{{ states(e_chargerConnectState) in rc_chargerConnectedStateList }}"

            # For Tesla BLE, if car got disconnected and driven away before the next update, all sensors stayed the same except binary_sensor.tesla_ble_vin_presence.
            # binary_sensor.tesla_ble_vin_presence detected car was away after few minutes, and script tried to turn off charger before exiting, but still all sensors stayed the same.
            # Unfortunately BLE Bluetooth beacon is unreliable, which means the charger and script can stop unintentionally if using binary_sensor.tesla_ble_vin_presence!
            - alias: "Continue if using Tesla BLE and car is at home"
              condition: template
              value_template: >
                {% if useBleMqttApi and has_value(e_evHomeState) %}
                  {{ states(e_evHomeState) in rc_evAtHomeStateList }}
                {% else %}
                  {{ true }}
                {% endif %}

            - alias: "Continue if battery is below charge limit"
              condition: template
              value_template: >
                {% if has_value(e_batteryLevel) and has_value(e_chargeLimit) %}
                  {{ (states(e_batteryLevel) | float) < (states(e_chargeLimit) | float) }}
                {% else %}
                  {{ true }}
                {% endif %}

            - alias: "Continue if looping for the first time or charger is charging "
              condition: template
              value_template: "{{ repeat.index == 1 or states(e_chargerChargeState) in rc_chargerChargingStateList }}"

            - condition: or
              conditions:

                - alias: "Continue if sun is above start or end elevations"
                  condition: template
                  value_template: >
                    {{ (is_state_attr('sun.sun', 'rising', true) and state_attr('sun.sun', 'elevation') >= sunriseElevationStartTrigger)
                    or (is_state_attr('sun.sun', 'rising', false) and state_attr('sun.sun', 'elevation') > sunsetElevationEndTrigger) }}

                - alias: "Continue if automation is running before charge end time"
                  condition: template
                  value_template: "{{ hasChargeEndTime and (chargeEndTime | as_datetime > now()) }}"

                - alias: "Continue if using secondary power source"
                  condition: template
                  value_template: "{{ has_value(e_useSecondaryPowerSource) and is_state(e_useSecondaryPowerSource, 'on') }}"

      sequence:
        #####################################
        # Calculate new charging current
        #####################################
        - variables:
            nowTime: "{{ now() }}"

            batteryChargeLimit: >
              {% if has_value(e_chargeLimit) %}
                {{ states(e_chargeLimit) | float }}
              {% else %}
                {{ 100 }}
              {% endif %}
            batteryChargeLevel: >
              {% if has_value(e_batteryLevel) %}
                {{ states(e_batteryLevel) | float }}
              {% else %}
                {{ 0 }}
              {% endif %}
            availableChargeDuration: "{{ chargeEndTime | as_timestamp - nowTime | as_timestamp }}"
            needChargeDuration: "{{ (batteryChargeLimit - batteryChargeLevel) * onePercentChargeDuration }}"

            isDaylightHour: >
              {% if (is_state_attr('sun.sun', 'rising', true) and state_attr('sun.sun', 'elevation') > sunriseElevationStartTrigger)
              or (is_state_attr('sun.sun', 'rising', false) and state_attr('sun.sun', 'elevation') > sunsetElevationEndTrigger) %}
                {{ true }}
              {% else %}
                {{ false }}
              {% endif %}

            # Charge current for this sequence run, including sanity check to ensure within limits. OCPP has current with 1 decimal place.
            batteryChargeCurrent: "{{ states(e_chargerAmp) | round(0) }}"
            oldChargeCurrent: >
              {% if batteryChargeCurrent < 0 %}
                {{ 0 }}
              {% elif batteryChargeCurrent > chargerMaxCurrent %}
                {{ chargerMaxCurrent }}
              {% else %}
                {{ batteryChargeCurrent }}
              {% endif %}

            # Maximise minimum charge current if charge end time is set and it is night time or there is not enough time to charge.
            # chargerMinCurrent might bounce between 0 and chargerMaxCurrent due to battery level not up-to-date or decimal inaccuracy,
            # so stablise it to chargerMaxCurrent if current is already at chargerMaxCurrent and needChargeDuration is only slightly less than availableChargeDuration.
            chargerMinCurrent: >
              {% if hasChargeEndTime and
                (
                  not isDaylightHour
                  or needChargeDuration >= availableChargeDuration
                  or ((needChargeDuration + onePercentChargeDuration) >= availableChargeDuration and oldChargeCurrent == chargerMaxCurrent)
                )
              %}
                {{ chargerMaxCurrent }}
              {% elif has_value(e_chargerMinCurrent) %}
                {% set minCurrent = states(e_chargerMinCurrent) | int %}
                {% if minCurrent < 0 %}
                  {{ 0 }}
                {% elif minCurrent > chargerMaxCurrent %}
                  {{ chargerMaxCurrent }}
                {% else %}
                  {{ minCurrent }}
                {% endif %}
              {% else %}
                {{ 0 }}
              {% endif %}

            # -ve to use from secondary power source, +ve to export to secondary power source.
            powerOffset: >
              {% if has_value(e_powerOffsetFromZero) %}
                {{ states(e_powerOffsetFromZero) | int }}
              {% else %}
                {{ 0 }}
              {% endif %}

            # Feedback loop power sensor (default 0 set by float(0) if cannot convert to float).
            feedbackLoopPower: "{{ states(e_mainPowerNet) | float(0) }}"

            # Power = Voltage * Current
            # The power step in watts to increase or decrease with 1A current change.
            chargerEffectiveVoltage: "{{ states(e_chargerEffectiveVoltage) | float }}"
            oneAmpWattStep: "{{ chargerEffectiveVoltage * 1 }}"

            # Net power from all sources.
            allPowerNet: "{{ feedbackLoopPower + (oneAmpWattStep * powerDrawSkew) + powerOffset }}"

            # This can be greater than chargerMaxCurrent.
            # +ve => importing amp from grid, -ve => exporting amp to grid
            allCurrentNet: "{{ (allPowerNet / chargerEffectiveVoltage) | float }}"

            # If importing from grid, will try to decrease charge current by same consumption or min charger current.
            # If exporting to grid, will try to increase charge current by same production or max charger current.
            proposeChargeCurrent: >
              {% if allCurrentNet > 0 %}
                {{ [chargerMinCurrent, oldChargeCurrent - allCurrentNet] | max | round(0) }}
              {% else %}
                {{ [chargerMaxCurrent, oldChargeCurrent - allCurrentNet] | min | round(0) }}
              {% endif %}
            
            # Ensure new charge current is greater than or equal to charger minimum current. Set 0A OCPP current if available current is less than 6A.
            newChargeCurrent: >
              {% set newCurrent = [chargerMinCurrent, proposeChargeCurrent] | max %}
              {% if newCurrent < chargerMinWorkableCurrent %}
                {{ 0 }}
              {% else %}
                {{ newCurrent }}
              {% endif %}

            debug_chargeCurrent: |
              nowTime = {{ nowTime }}
              chargeEndTime = {{ chargeEndTime }}
              batteryChargeLimit = {{ batteryChargeLimit }}
              batteryChargeLevel = {{ batteryChargeLevel }}
              availableChargeDuration = {{ availableChargeDuration }}
              needChargeDuration = {{ needChargeDuration }}
              isDaylightHour = {{ isDaylightHour }}
              batteryChargeCurrent = {{ batteryChargeCurrent }}
              oldChargeCurrent = {{ oldChargeCurrent }}
              chargerMinCurrent = {{ chargerMinCurrent }}
              powerOffset = {{ powerOffset }}
              feedbackLoopPower = {{ feedbackLoopPower }}
              chargerEffectiveVoltage = {{ chargerEffectiveVoltage }}
              allPowerNet = {{ allPowerNet }}
              allCurrentNet = {{ allCurrentNet }}
              proposeChargeCurrent = {{ proposeChargeCurrent }}
              newChargeCurrent = {{ newChargeCurrent }}

        - choose:
          #####################################
          # Turn on charger if looping for the first time
          #####################################
          - conditions:
              - alias: "Turn on charger if looping for the first time"
                condition: template
                value_template: "{{ repeat.index == 1 }}"
            sequence:
              - alias: "Turn on charger if not already on"
                if:
                  - condition: template
                    value_template: "{{ is_state(e_chargerSwitch, 'off') }}"
                then:
                  # Turn on charger for the first time. Rate of current increase is handled by Tesla car.
                  - action: switch.turn_on
                    data: {}
                    target:
                      entity_id: "{{ e_chargerSwitch }}"
                  - delay: "{{ wait_charger_on }}"

              # Always set initial charge current here after turning on charger.
              # Tesla API will only set new charge current if the old and new values are different. Confirmed in log.
              # If using OCPP API. See https://github.com/lbbrhzn/ocpp/blob/main/docs/Charge_automation.md
              - alias: "Set initial charge current"
                if:
                  - condition: template
                    value_template: "{{ useOcppChargerApi }}"
                then:
                  # https://www.ampcontrol.io/ocpp-guide/how-to-use-smart-charging-with-ocpp#:~:text=This%20is%20used%20to%20stack,manner%20if%20connectivity%20is%20lost.
                  - alias: "Get OCPP charge profile max stack level. This stack level will be used to override all others."
                    action: ocpp.get_configuration
                    data:
                      devid: "{{ states(e_ocppChargerId) }}"
                      ocpp_key: "ChargeProfileMaxStackLevel"
                    response_variable: ocppMaxStackLevelMap

                  - action: ocpp.set_charge_rate     
                    data:
                      custom_profile: |
                        {
                          "transactionId": {{ states(e_ocppChargerTransactionId) | int }},
                          "chargingProfileId": 1,
                          "stackLevel": {{ ocppMaxStackLevelMap['value'] | int }},
                          "chargingProfilePurpose": "TxProfile",
                          "chargingProfileKind": "Relative",
                          "chargingSchedule": {
                            "chargingRateUnit": "A",
                            "chargingSchedulePeriod": [
                              {"startPeriod": 0, "limit": {{ initial_charge_current }}}  
                            ]
                          }
                        }
                      conn_id: 1
                else:
                  - action: number.set_value
                    data:
                      value: "{{ initial_charge_current }}"
                    target:
                      entity_id: "{{ e_chargerAmp }}"
              - delay: "{{ wait_current_change }}"

              # Ensure status update after turning on charger
              - if:
                  - condition: template
                    value_template: "{{ has_value(e_evForceUpdateHa) }}"
                then:
                  - action: "{{ states[e_evForceUpdateHa]['domain'] }}.press"
                    data: {}
                    target:
                      entity_id: "{{ e_evForceUpdateHa }}"
              - delay: "{{ waitApiUpdateHa }}"

          #####################################
          # Change charging current if required
          #####################################
          - conditions:
              - alias: "Set charge current if new current is different from old"
                condition: template
                value_template: "{{ newChargeCurrent != oldChargeCurrent }}"
            sequence:
              - if:
                  - condition: template
                    value_template: "{{ useOcppChargerApi }}"
                then:
                  - action: ocpp.set_charge_rate
                    data:
                      custom_profile: |
                        {
                          "transactionId": {{ states(e_ocppChargerTransactionId) | int }},
                          "chargingProfileId": 1,
                          "stackLevel": {{ ocppMaxStackLevelMap['value'] | int }},
                          "chargingProfilePurpose": "TxProfile",
                          "chargingProfileKind": "Relative",
                          "chargingSchedule": {
                            "chargingRateUnit": "A",
                            "chargingSchedulePeriod": [
                              {"startPeriod": 0, "limit": {{ newChargeCurrent }}}  
                            ]
                          }
                        }
                      conn_id: 1
                else:
                  - action: number.set_value
                    data_template:
                      value: "{{ newChargeCurrent }}"
                    target:
                      entity_id: "{{ e_chargerAmp }}"
              # No need to wait here because already waiting in main loop.
              # - delay: "{{ wait_current_change }}"

          #####################################
          # Default do nothing
          #####################################
          default:
            - alias: "Do nothing since new current is same as old"
              delay: "00:00:00"

        # Sometimes the charging status is not updated after turning on charger causing script to exit in while loop. Best to get status now.
        # Tesla BLE MQTT took 110 sec for force_update_all, but only 13 sec for force_update_charge.
        # Tesla Fleet API does not have force update button, so might need to create helper button to poll Tesla Fleet API here.
        # Get latest conditions from Tesla to update HA as last step before checking these conditions at beginning of repeat loop.
        - if:
            - condition: template
              value_template: "{{ has_value(e_evForceUpdateHa) }}"
          then:
            - action: "{{ states[e_evForceUpdateHa]['domain'] }}.press"
              data: {}
              target:
                entity_id: "{{ e_evForceUpdateHa }}"
        # No need to wait here because already waiting in main loop.
        # - delay: "{{ waitApiUpdateHa }}"

        # Sleep enough to allow solar inverter updates. Should be ok to sleep longer to avoid changing charge current too often.
        # Other things can happen during sleep time, eg. car unplugged.
        # Tesla BLE need 25 seconds here.
        - delay:
            hours: 0
            minutes: 0
            seconds: !input wait_main_power_net_update
            milliseconds: 0

        - variables:
            debug_newStates: |
              nowTime = {{ now() }}
              e_stopCharger = {% if has_value(e_stopCharger) %}{{ states(e_stopCharger) }}{% else %}{{ 'Not defined' }}{% endif %}
              e_useSecondaryPowerSource = {% if has_value(e_useSecondaryPowerSource) %}{{ states(e_useSecondaryPowerSource) }}{% else %}{{ 'Not defined' }}{% endif %}
              e_sunElevation = {{ state_attr('sun.sun', 'elevation') }}
              e_evHomeState = {% if has_value(e_evHomeState) %}{{ states(e_evHomeState) }}{% else %}{{ 'Not defined' }}{% endif %}
              e_chargerConnectState = {{ states(e_chargerConnectState) }}
              e_chargerSwitch = {{ states(e_chargerSwitch) }}
              e_chargerChargeState = {{ states(e_chargerChargeState) }}
              e_batteryLevel = {% if has_value(e_batteryLevel) %}{{ states(e_batteryLevel) }}{% else %}{{ 'Not defined' }}{% endif %}
              e_chargeLimit = {% if has_value(e_chargeLimit) %}{{ states(e_chargeLimit) }}{% else %}{{ 'Not defined' }}{% endif %}

  #####################################
  # Exit script
  #####################################
  # Set 0 charging current and turn off charger if it is on or charging
  - if:
      - condition: template
        value_template: "{{ is_state(e_chargerSwitch, 'on') }}"
    then:
      - if:
          - condition: template
            value_template: "{{ useOcppChargerApi }}"
        then:
          - action: ocpp.get_configuration
            data:
              devid: "{{ states(e_ocppChargerId) }}"
              ocpp_key: "ChargeProfileMaxStackLevel"
            response_variable: ocppMaxStackLevelMap

          - action: ocpp.set_charge_rate
            data:
              custom_profile: |
                {
                  "transactionId": {{ states(e_ocppChargerTransactionId) | int }},
                  "chargingProfileId": 1,
                  "stackLevel": {{ ocppMaxStackLevelMap['value'] | int }},
                  "chargingProfilePurpose": "TxProfile",
                  "chargingProfileKind": "Relative",
                  "chargingSchedule": {
                    "chargingRateUnit": "A",
                    "chargingSchedulePeriod": [
                      {"startPeriod": 0, "limit": {{ 0 }}}  
                    ]
                  }
                }
              conn_id: 1
        else:
          # No need for step current change for Tesla car since car does step current change. Not sure about other EVs or chargers.
          # Tesla car can decrease current from 15A -> 7A -> 0A in 1 second.
          - action: number.set_value
            data_template:
              value: "{{ 0 }}"
            target:
              entity_id: "{{ e_chargerAmp }}"
      - delay: "{{ wait_current_change }}"

      # For BLE, charger is still turned on after reaching charge limit, ie. charging status=complete, so need to turn off charger here.
      - alias: "Turn off charger on exit"
        action: switch.turn_off
        data: {}
        target:
          entity_id: "{{ e_chargerSwitch }}"
      - delay: "{{ wait_charger_off }}"

  # For Tesla custom API, do not send command to turn off charger here if charger is already disconnected because it will trigger charger connect and disconnect events causing another run.
  # Get the latest data from Tesla to update HA before exiting script.
  - if:
      - condition: template
        value_template: "{{ has_value(e_evForceUpdateHa) }}"
    then:
      - action: "{{ states[e_evForceUpdateHa]['domain'] }}.press"
        data: {}
        target:
          entity_id: "{{ e_evForceUpdateHa }}"
  # Moved status wait out of if statement to apply wait for all just before exit.
  - delay: "{{ waitApiUpdateHa }}"

  #####################################
  # Check tomorrow schedule before exit
  #####################################
  - variables:
      setDailyChargeLimit: "{% if has_value(i_setDailyChargeLimit) %}{{ states(i_setDailyChargeLimit) }}{% else %}{{ 'off' }}{% endif %}"
      nowTime: "{{ now() }}"
      # Tomorrow has charge end time ?
      tomorrowIdx: "{{ ( now().weekday() + 1 ) % 7 }}"
      tomorrowHasChargeEndTime: >
        {% if setDailyChargeLimit == 'on' %}
          {{ chargeLimitList[tomorrowIdx][k_chargeCompletionTime] != charge_completion_time_default }}
        {% else %}
          {{ false }}
        {% endif %}
      # Calculate tomorrow charge end time
      # state_attr('sun.sun', 'next_rising').isoformat() is ISO 8601 formatted and has T between date and time, ie. can only compare with another ISO formatted string.
      tomorrowChargeEndTime: "{{ today_at('00:00:00') + timedelta(hours = 24) + as_timedelta(chargeLimitList[tomorrowIdx][k_chargeCompletionTime]) }}"
      tomorrowChargeStartTime: "{{ today_at(state_attr('sun.sun', 'next_rising') | as_timestamp | timestamp_custom('%H:%M:%S')) + timedelta(days = 1, seconds = (centreOfSunDegreeBelowHorizonAtSunrise + sunriseElevationStartTrigger) * secondsPerDegreeSunrise) }}"
      tomorrowAvailableChargeDuration: "{{ tomorrowChargeEndTime | as_timestamp - tomorrowChargeStartTime | as_timestamp }}"
      tomorrowNeedChargeDuration: >
        {% if has_value(e_batteryLevel) and has_value(e_chargeLimit) %}
          {{ (states(e_chargeLimit) | float - states(e_batteryLevel) | float) * onePercentChargeDuration }}
        {% else %}
          {{ 100 * onePercentChargeDuration }}
        {% endif %}
      tomorrowProposeChargeStartTime: "{{ tomorrowChargeEndTime | as_datetime - timedelta(seconds = tomorrowNeedChargeDuration) }}"
      tomorrowNewChargeStartTime: >
        {% if tomorrowProposeChargeStartTime <= nowTime %}
          {{ nowTime | as_datetime + timedelta(minutes = 2) }}
        {% else %}
          {{ tomorrowProposeChargeStartTime }}
        {% endif %}

  - alias: "Set trigger time if need to meet next charge completion time"
    if:
      - condition: template
        value_template: "{{ tomorrowHasChargeEndTime and tomorrowNeedChargeDuration > tomorrowAvailableChargeDuration }}"
    then:
      - action: input_datetime.set_datetime
        target:
          entity_id: "{{ e_nextChargeTimeTrigger }}"
        data:
          timestamp: "{{ tomorrowNewChargeStartTime | as_timestamp }}"

# Exiting script due to charger turned off manually or automatically by car when charge limit reached.
# If this is unexpected, try increasing wait time for "Wait status update".
# https://www.home-assistant.io/docs/scripts/#stopping-a-script-sequence
# Cannot get response_variable to work. Needs to be key/value pair?
#response_variable: "stop_charging_reason"

###############################################################################
# Only one Blueprint can run at any one time
###############################################################################
mode: single
